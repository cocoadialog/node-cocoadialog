/*! dustjs-linkedin - v2.7.2
* http://dustjs.com/
* Copyright (c) 2015 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define("dust.core",[],b):"object"==typeof exports?module.exports=b():a.dust=b()}(this,function(){function getTemplate(a,b){return a?"function"==typeof a&&a.template?a.template:dust.isTemplateFn(a)?a:b!==!1?dust.cache[a]:void 0:void 0}function load(a,b,c){if(!a)return b.setError(new Error("No template or template name provided to render"));var d=getTemplate(a,dust.config.cache);return d?d(b,Context.wrap(c,d.templateName)):dust.onLoad?b.map(function(b){function d(a,d){var f;if(a)return b.setError(a);if(f=getTemplate(d,!1)||getTemplate(e,dust.config.cache),!f){if(!dust.compile)return b.setError(new Error("Dust compiler not available"));f=dust.loadSource(dust.compile(d,e))}f(b,Context.wrap(c,f.templateName)).end()}var e=a;3===dust.onLoad.length?dust.onLoad(e,c.options,d):dust.onLoad(e,d)}):b.setError(new Error("Template Not Found: "+a))}function Context(a,b,c,d,e){void 0===a||a instanceof Stack||(a=new Stack(a)),this.stack=a,this.global=b,this.options=c,this.blocks=d,this.templateName=e}function getWithResolvedData(a,b,c){return function(d){return a.push(d)._get(b,c)}}function Stack(a,b,c,d){this.tail=b,this.isObject=a&&"object"==typeof a,this.head=a,this.index=c,this.of=d}function Stub(a){this.head=new Chunk(this),this.callback=a,this.out=""}function Stream(){this.head=new Chunk(this)}function Chunk(a,b,c){this.root=a,this.next=b,this.data=[],this.flushable=!1,this.taps=c}function Tap(a,b){this.head=a,this.tail=b}var dust={version:"2.7.2"},NONE="NONE",ERROR="ERROR",WARN="WARN",INFO="INFO",DEBUG="DEBUG",EMPTY_FUNC=function(){};dust.config={whitespace:!1,amd:!1,cjs:!1,cache:!0},dust._aliases={write:"w",end:"e",map:"m",render:"r",reference:"f",section:"s",exists:"x",notexists:"nx",block:"b",partial:"p",helper:"h"},function(){var a,b,c={DEBUG:0,INFO:1,WARN:2,ERROR:3,NONE:4};"undefined"!=typeof console&&console.log?(a=console.log,b="function"==typeof a?function(){a.apply(console,arguments)}:function(){a(Array.prototype.slice.apply(arguments).join(" "))}):b=EMPTY_FUNC,dust.log=function(a,d){d=d||INFO,c[d]>=c[dust.debugLevel]&&b("[DUST:"+d+"]",a)},dust.debugLevel=NONE,"undefined"!=typeof process&&process.env&&/\bdust\b/.test(process.env.DEBUG)&&(dust.debugLevel=DEBUG)}(),dust.helpers={},dust.cache={},dust.register=function(a,b){a&&(b.templateName=a,dust.config.cache!==!1&&(dust.cache[a]=b))},dust.render=function(a,b,c){var d=new Stub(c).head;try{load(a,d,b).end()}catch(e){d.setError(e)}},dust.stream=function(a,b){var c=new Stream,d=c.head;return dust.nextTick(function(){try{load(a,d,b).end()}catch(c){d.setError(c)}}),c},dust.loadSource=function(source){return eval(source)},dust.isArray=Array.isArray?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)},dust.nextTick=function(){return function(a){setTimeout(a,0)}}(),dust.isEmpty=function(a){return 0===a?!1:dust.isArray(a)&&!a.length?!0:!a},dust.isEmptyObject=function(a){var b;if(null===a)return!1;if(void 0===a)return!1;if(a.length>0)return!1;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b))return!1;return!0},dust.isTemplateFn=function(a){return"function"==typeof a&&a.__dustBody},dust.isThenable=function(a){return a&&"object"==typeof a&&"function"==typeof a.then},dust.isStreamable=function(a){return a&&"function"==typeof a.on&&"function"==typeof a.pipe},dust.filter=function(a,b,c,d){var e,f,g,h;if(c)for(e=0,f=c.length;f>e;e++)g=c[e],g.length&&(h=dust.filters[g],"s"===g?b=null:"function"==typeof h?a=h(a,d):dust.log("Invalid filter `"+g+"`",WARN));return b&&(a=dust.filters[b](a,d)),a},dust.filters={h:function(a){return dust.escapeHtml(a)},j:function(a){return dust.escapeJs(a)},u:encodeURI,uc:encodeURIComponent,js:function(a){return dust.escapeJSON(a)},jp:function(a){return JSON?JSON.parse(a):(dust.log("JSON is undefined; could not parse `"+a+"`",WARN),a)}},dust.makeBase=dust.context=function(a,b){return new Context(void 0,a,b)},Context.wrap=function(a,b){return a instanceof Context?a:new Context(a,{},{},null,b)},Context.prototype.get=function(a,b){return"string"==typeof a&&("."===a[0]&&(b=!0,a=a.substr(1)),a=a.split(".")),this._get(b,a)},Context.prototype._get=function(a,b){var c,d,e,f,g,h=this.stack||{},i=1;if(d=b[0],e=b.length,a&&0===e)f=h,h=h.head;else{if(a)h&&(h=h.head?h.head[d]:void 0);else{for(;h&&(!h.isObject||(f=h.head,c=h.head[d],void 0===c));)h=h.tail;h=void 0!==c?c:this.global&&this.global[d]}for(;h&&e>i;){if(dust.isThenable(h))return h.then(getWithResolvedData(this,a,b.slice(i)));f=h,h=h[b[i]],i++}}return"function"==typeof h?(g=function(){try{return h.apply(f,arguments)}catch(a){throw dust.log(a,ERROR),a}},g.__dustBody=!!h.__dustBody,g):(void 0===h&&dust.log("Cannot find reference `{"+b.join(".")+"}` in template `"+this.getTemplateName()+"`",INFO),h)},Context.prototype.getPath=function(a,b){return this._get(a,b)},Context.prototype.push=function(a,b,c){return void 0===a?(dust.log("Not pushing an undefined variable onto the context",INFO),this):this.rebase(new Stack(a,this.stack,b,c))},Context.prototype.pop=function(){var a=this.current();return this.stack=this.stack&&this.stack.tail,a},Context.prototype.rebase=function(a){return new Context(a,this.global,this.options,this.blocks,this.getTemplateName())},Context.prototype.clone=function(){var a=this.rebase();return a.stack=this.stack,a},Context.prototype.current=function(){return this.stack&&this.stack.head},Context.prototype.getBlock=function(a){var b,c,d;if("function"==typeof a&&(a=a(new Chunk,this).data.join("")),b=this.blocks,!b)return dust.log("No blocks for context `"+a+"` in template `"+this.getTemplateName()+"`",DEBUG),!1;for(c=b.length;c--;)if(d=b[c][a])return d;return dust.log("Malformed template `"+this.getTemplateName()+"` was missing one or more blocks."),!1},Context.prototype.shiftBlocks=function(a){var b,c=this.blocks;return a?(b=c?c.concat([a]):[a],new Context(this.stack,this.global,this.options,b,this.getTemplateName())):this},Context.prototype.resolve=function(a){var b;return"function"!=typeof a?a:(b=(new Chunk).render(a,this),b instanceof Chunk?b.data.join(""):b)},Context.prototype.getTemplateName=function(){return this.templateName},Stub.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.callback(a.error),dust.log("Rendering failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.out+=a.data.join(""),a=a.next,this.head=a}this.callback(null,this.out)},Stream.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.emit("error",a.error),this.emit("end"),dust.log("Streaming failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.emit("data",a.data.join("")),a=a.next,this.head=a}this.emit("end")},Stream.prototype.emit=function(a,b){var c,d,e=this.events||{},f=e[a]||[];if(!f.length)return dust.log("Stream broadcasting, but no listeners for `"+a+"`",DEBUG),!1;for(f=f.slice(0),c=0,d=f.length;d>c;c++)f[c](b);return!0},Stream.prototype.on=function(a,b){var c=this.events=this.events||{},d=c[a]=c[a]||[];return"function"!=typeof b?dust.log("No callback function provided for `"+a+"` event listener",WARN):d.push(b),this},Stream.prototype.pipe=function(a){if("function"!=typeof a.write||"function"!=typeof a.end)return dust.log("Incompatible stream passed to `pipe`",WARN),this;var b=!1;return"function"==typeof a.emit&&a.emit("pipe",this),"function"==typeof a.on&&a.on("error",function(){b=!0}),this.on("data",function(c){if(!b)try{a.write(c,"utf8")}catch(d){dust.log(d,ERROR)}}).on("end",function(){if(!b)try{a.end(),b=!0}catch(c){dust.log(c,ERROR)}})},Chunk.prototype.write=function(a){var b=this.taps;return b&&(a=b.go(a)),this.data.push(a),this},Chunk.prototype.end=function(a){return a&&this.write(a),this.flushable=!0,this.root.flush(),this},Chunk.prototype.map=function(a){var b=new Chunk(this.root,this.next,this.taps),c=new Chunk(this.root,b,this.taps);this.next=c,this.flushable=!0;try{a(c)}catch(d){dust.log(d,ERROR),c.setError(d)}return b},Chunk.prototype.tap=function(a){var b=this.taps;return this.taps=b?b.push(a):new Tap(a),this},Chunk.prototype.untap=function(){return this.taps=this.taps.tail,this},Chunk.prototype.render=function(a,b){return a(this,b)},Chunk.prototype.reference=function(a,b,c,d){return"function"==typeof a?(a=a.apply(b.current(),[this,b,null,{auto:c,filters:d}]),a instanceof Chunk?a:this.reference(a,b,c,d)):dust.isThenable(a)?this.await(a,b,null,c,d):dust.isStreamable(a)?this.stream(a,b,null,c,d):dust.isEmpty(a)?this:this.write(dust.filter(a,c,d,b))},Chunk.prototype.section=function(a,b,c,d){var e,f,g,h=c.block,i=c["else"],j=this;if("function"==typeof a&&!dust.isTemplateFn(a)){try{a=a.apply(b.current(),[this,b,c,d])}catch(k){return dust.log(k,ERROR),this.setError(k)}if(a instanceof Chunk)return a}if(dust.isEmptyObject(c))return j;if(dust.isEmptyObject(d)||(b=b.push(d)),dust.isArray(a)){if(h){if(f=a.length,f>0){for(g=b.stack&&b.stack.head||{},g.$len=f,e=0;f>e;e++)g.$idx=e,j=h(j,b.push(a[e],e,f));return g.$idx=void 0,g.$len=void 0,j}if(i)return i(this,b)}}else{if(dust.isThenable(a))return this.await(a,b,c);if(dust.isStreamable(a))return this.stream(a,b,c);if(a===!0){if(h)return h(this,b)}else if(a||0===a){if(h)return h(this,b.push(a))}else if(i)return i(this,b)}return dust.log("Section without corresponding key in template `"+b.getTemplateName()+"`",DEBUG),this},Chunk.prototype.exists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(e)return e(this,b)}else{if(d)return d(this,b);dust.log("No block for exists check in template `"+b.getTemplateName()+"`",DEBUG)}return this},Chunk.prototype.notexists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(d)return d(this,b);dust.log("No block for not-exists check in template `"+b.getTemplateName()+"`",DEBUG)}else if(e)return e(this,b);return this},Chunk.prototype.block=function(a,b,c){var d=a||c.block;return d?d(this,b):this},Chunk.prototype.partial=function(a,b,c,d){var e;return void 0===d&&(d=c,c=b),dust.isEmptyObject(d)||(c=c.clone(),e=c.pop(),c=c.push(d).push(e)),dust.isTemplateFn(a)?this.capture(a,b,function(a,b){c.templateName=a,load(a,b,c).end()}):(c.templateName=a,load(a,this,c))},Chunk.prototype.helper=function(a,b,c,d,e){var f,g=this,h=d.filters;if(void 0===e&&(e="h"),!dust.helpers[a])return dust.log("Helper `"+a+"` does not exist",WARN),g;try{return f=dust.helpers[a](g,b,c,d),f instanceof Chunk?f:("string"==typeof h&&(h=h.split("|")),dust.isEmptyObject(c)?g.reference(f,b,e,h):g.section(f,b,c,d))}catch(i){return dust.log("Error in helper `"+a+"`: "+i.message,ERROR),g.setError(i)}},Chunk.prototype.await=function(a,b,c,d,e){return this.map(function(f){a.then(function(a){f=c?f.section(a,b,c):f.reference(a,b,d,e),f.end()},function(a){var d=c&&c.error;d?f.render(d,b.push(a)).end():(dust.log("Unhandled promise rejection in `"+b.getTemplateName()+"`",INFO),f.end())})})},Chunk.prototype.stream=function(a,b,c,d,e){var f=c&&c.block,g=c&&c.error;return this.map(function(h){var i=!1;a.on("data",function(a){i||(f?h=h.map(function(c){c.render(f,b.push(a)).end()}):c||(h=h.reference(a,b,d,e)))}).on("error",function(a){i||(g?h.render(g,b.push(a)):dust.log("Unhandled stream error in `"+b.getTemplateName()+"`",INFO),i||(i=!0,h.end()))}).on("end",function(){i||(i=!0,h.end())})})},Chunk.prototype.capture=function(a,b,c){return this.map(function(d){var e=new Stub(function(a,b){a?d.setError(a):c(b,d)});a(e.head,b).end()})},Chunk.prototype.setError=function(a){return this.error=a,this.root.flush(),this};for(var f in Chunk.prototype)dust._aliases[f]&&(Chunk.prototype[dust._aliases[f]]=Chunk.prototype[f]);Tap.prototype.push=function(a){return new Tap(a,this)},Tap.prototype.go=function(a){for(var b=this;b;)a=b.head(a),b=b.tail;return a};var HCHARS=/[&<>"']/,AMP=/&/g,LT=/</g,GT=/>/g,QUOT=/\"/g,SQUOT=/\'/g;dust.escapeHtml=function(a){return"string"==typeof a||a&&"function"==typeof a.toString?("string"!=typeof a&&(a=a.toString()),HCHARS.test(a)?a.replace(AMP,"&amp;").replace(LT,"&lt;").replace(GT,"&gt;").replace(QUOT,"&quot;").replace(SQUOT,"&#39;"):a):a};var BS=/\\/g,FS=/\//g,CR=/\r/g,LS=/\u2028/g,PS=/\u2029/g,NL=/\n/g,LF=/\f/g,SQ=/'/g,DQ=/"/g,TB=/\t/g;return dust.escapeJs=function(a){return"string"==typeof a?a.replace(BS,"\\\\").replace(FS,"\\/").replace(DQ,'\\"').replace(SQ,"\\'").replace(CR,"\\r").replace(LS,"\\u2028").replace(PS,"\\u2029").replace(NL,"\\n").replace(LF,"\\f").replace(TB,"\\t"):a},dust.escapeJSON=function(a){return JSON?JSON.stringify(a).replace(LS,"\\u2028").replace(PS,"\\u2029").replace(LT,"\\u003c"):(dust.log("JSON is undefined; could not escape `"+a+"`",WARN),a)},dust}),"function"==typeof define&&define.amd&&define.amd.dust===!0&&define(["require","dust.core"],function(require,dust){return dust.onLoad=function(a,b){require([a],function(){b()})},dust});
/*! dustjs-helpers - v1.7.3
* http://dustjs.com/
* Copyright (c) 2015 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define(["dust.core"],b):"object"==typeof exports?module.exports=b(require("dustjs-linkedin")):b(a.dust)}(this,function(dust){function a(a,b,c){c=c||"INFO",a=a?"{@"+a+"}: ":"",dust.log(a+b,c)}function b(b){k[b]||(a(b,"Deprecation warning: "+b+" is deprecated and will be removed in a future version of dustjs-helpers","WARN"),a(null,"For help and a deprecation timeline, see https://github.com/linkedin/dustjs-helpers/wiki/Deprecated-Features#"+b.replace(/\W+/g,""),"WARN"),k[b]=!0)}function c(a){return a.stack.tail&&a.stack.tail.head&&"undefined"!=typeof a.stack.tail.head.__select__}function d(a){return c(a)&&a.get("__select__")}function e(a,b){var c,d=a.stack.head,e=a.rebase();a.stack&&a.stack.tail&&(e.stack=a.stack.tail);var f={isPending:!1,isResolved:!1,isDeferredComplete:!1,deferreds:[]};for(c in b)f[c]=b[c];return e.push({__select__:f}).push(d,a.stack.index,a.stack.of)}function f(a){var b,c;if(a.isDeferredPending=!0,a.deferreds.length)for(a.isDeferredComplete=!0,b=0,c=a.deferreds.length;c>b;b++)a.deferreds[b]();a.isDeferredPending=!1}function g(a,b){return"function"==typeof b?b.toString().replace(/(^\s+|\s+$)/gm,"").replace(/\n/gm,"").replace(/,\s*/gm,", ").replace(/\)\{/gm,") {"):b}function h(a,b){return function(c,d,e,f){return i(c,d,e,f,a,b)}}function i(b,c,e,f,g,h){var i,k,l,m,n=e.block,o=e["else"],p=d(c)||{};if(p.isResolved&&!p.isDeferredPending)return b;if(f.hasOwnProperty("key"))k=f.key;else{if(!p.hasOwnProperty("key"))return a(g,"No key specified","WARN"),b;k=p.key}return m=f.type||p.type,k=j(c.resolve(k),m),l=j(c.resolve(f.value),m),h(k,l)?(p.isPending||(i=!0,p.isPending=!0),n&&(b=b.render(n,c)),i&&(p.isResolved=!0)):o&&(b=b.render(o,c)),b}function j(a,b){switch(b&&(b=b.toLowerCase()),b){case"number":return+a;case"string":return String(a);case"boolean":return a="false"===a?!1:a,Boolean(a);case"date":return new Date(a)}return a}var k={},l={tap:function(a,c,d){return b("tap"),d.resolve(a)},sep:function(a,b,c){var d=c.block;return b.stack.index===b.stack.of-1?a:d?d(a,b):a},first:function(a,b,c){return 0===b.stack.index?c.block(a,b):a},last:function(a,b,c){return b.stack.index===b.stack.of-1?c.block(a,b):a},contextDump:function(b,c,d,e){var f,h,i=c.resolve(e.to),j=c.resolve(e.key);switch(j){case"full":f=c.stack;break;default:f=c.stack.head}switch(h=JSON.stringify(f,g,2),i){case"console":a("contextDump",h);break;default:h=h.replace(/</g,"\\u003c"),b=b.write(h)}return b},math:function(b,c,g,h){var i,j=h.key,k=h.method,l=h.operand,m=h.round;if(!h.hasOwnProperty("key")||!h.method)return a("math","`key` or `method` was not provided","ERROR"),b;switch(j=parseFloat(c.resolve(j)),l=parseFloat(c.resolve(l)),k){case"mod":0===l&&a("math","Division by 0","ERROR"),i=j%l;break;case"add":i=j+l;break;case"subtract":i=j-l;break;case"multiply":i=j*l;break;case"divide":0===l&&a("math","Division by 0","ERROR"),i=j/l;break;case"ceil":case"floor":case"round":case"abs":i=Math[k](j);break;case"toint":i=parseInt(j,10);break;default:a("math","Method `"+k+"` is not supported","ERROR")}return"undefined"!=typeof i&&(m&&(i=Math.round(i)),g&&g.block?(c=e(c,{key:i}),b=b.render(g.block,c),f(d(c))):b=b.write(i)),b},select:function(b,c,g,h){var i=g.block,j={};return h.hasOwnProperty("key")&&(j.key=c.resolve(h.key)),h.hasOwnProperty("type")&&(j.type=h.type),i?(c=e(c,j),b=b.render(i,c),f(d(c))):a("select","Missing body block","WARN"),b},eq:h("eq",function(a,b){return a===b}),ne:h("ne",function(a,b){return a!==b}),lt:h("lt",function(a,b){return b>a}),lte:h("lte",function(a,b){return b>=a}),gt:h("gt",function(a,b){return a>b}),gte:h("gte",function(a,b){return a>=b}),any:function(b,c,e,f){var g=d(c);return g?g.isDeferredComplete?a("any","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){g.deferreds.push(function(){g.isResolved&&(a=a.render(e.block,c)),a.end()})}):a("any","Must be used inside a {@select} block","ERROR"),b},none:function(b,c,e,f){var g=d(c);return g?g.isDeferredComplete?a("none","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){g.deferreds.push(function(){g.isResolved||(a=a.render(e.block,c)),a.end()})}):a("none","Must be used inside a {@select} block","ERROR"),b},size:function(a,b,c,d){var e,f,g=d.key;if(g=b.resolve(d.key),g&&g!==!0)if(dust.isArray(g))e=g.length;else if(!isNaN(parseFloat(g))&&isFinite(g))e=g;else if("object"==typeof g){e=0;for(f in g)g.hasOwnProperty(f)&&e++}else e=(g+"").length;else e=0;return a.write(e)}};for(var m in l)dust.helpers[m]=l[m];return dust});
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.page=e()}}(function(){return function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){var c="function"==typeof require&&require;if(!s&&c)return c(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var f=n[a]={exports:{}};t[a][0].call(f.exports,function(e){var n=t[a][1][e];return i(n||e)},f,f.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){(function(n){"use strict";function r(e,t){if("function"==typeof e)return r("*",e);if("function"==typeof t)for(var n=new s(e),i=1;i<arguments.length;++i)r.callbacks.push(n.middleware(arguments[i]));else"string"==typeof e?r["string"==typeof t?"redirect":"show"](e,t):r.start(e)}function i(e){if(!e.handled){var t;t=y?g+v.hash.replace("#!",""):v.pathname+v.search,t!==e.canonicalPath&&(r.stop(),e.handled=!1,v.href=e.canonicalPath)}}function o(e){return"string"!=typeof e?e:m?decodeURIComponent(e.replace(/\+/g," ")):e}function a(e,t){"/"===e[0]&&0!==e.indexOf(g)&&(e=g+(y?"#!":"")+e);var n=e.indexOf("?");if(this.canonicalPath=e,this.path=e.replace(g,"")||"/",y&&(this.path=this.path.replace("#!","")||"/"),this.title=document.title,this.state=t||{},this.state.path=e,this.querystring=~n?o(e.slice(n+1)):"",this.pathname=o(~n?e.slice(0,n):e),this.params={},this.hash="",!y){if(!~this.path.indexOf("#"))return;var r=this.path.split("#");this.path=r[0],this.hash=o(r[1])||"",this.querystring=this.querystring.split("#")[0]}}function s(e,t){t=t||{},this.path="*"===e?"(.*)":e,this.method="GET",this.regexp=p(this.path,this.keys=[],t)}function c(e){if(1===u(e)&&!(e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){for(var t=e.path?e.path[0]:e.target;t&&"A"!==t.nodeName;)t=t.parentNode;if(t&&"A"===t.nodeName&&!t.hasAttribute("download")&&"external"!==t.getAttribute("rel")){var i=t.getAttribute("href");if((y||t.pathname!==v.pathname||!t.hash&&"#"!==i)&&!(i&&i.indexOf("mailto:")>-1)&&!t.target&&f(t.href)){var o=t.pathname+t.search+(t.hash||"");void 0!==n&&o.match(/^\/[a-zA-Z]:\//)&&(o=o.replace(/^\/[a-zA-Z]:\//,"/"));var a=o;0===o.indexOf(g)&&(o=o.substr(g.length)),y&&(o=o.replace("#!","")),g&&a===o||(e.preventDefault(),r.show(a))}}}}function u(e){return e=e||window.event,null===e.which?e.button:e.which}function f(e){var t=v.protocol+"//"+v.hostname;return v.port&&(t+=":"+v.port),e&&0===e.indexOf(t)}var p=e("path-to-regexp");t.exports=r;var h,d,l="undefined"!=typeof document&&document.ontouchstart?"touchstart":"click",v="undefined"!=typeof window&&(window.history.location||window.location),w=!0,m=!0,g="",y=!1;r.callbacks=[],r.exits=[],r.current="",r.len=0,r.base=function(e){if(0===arguments.length)return g;g=e},r.start=function(e){if(e=e||{},!h&&(h=!0,!1===e.dispatch&&(w=!1),!1===e.decodeURLComponents&&(m=!1),!1!==e.popstate&&window.addEventListener("popstate",x,!1),!1!==e.click&&document.addEventListener(l,c,!1),!0===e.hashbang&&(y=!0),w)){var t=y&&~v.hash.indexOf("#!")?v.hash.substr(2)+v.search:v.pathname+v.search+v.hash;r.replace(t,null,!0,w)}},r.stop=function(){h&&(r.current="",r.len=0,h=!1,document.removeEventListener(l,c,!1),window.removeEventListener("popstate",x,!1))},r.show=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,!1!==n&&r.dispatch(o),!1!==o.handled&&!1!==i&&o.pushState(),o},r.back=function(e,t){r.len>0?(history.back(),r.len--):e?setTimeout(function(){r.show(e,t)}):setTimeout(function(){r.show(g,t)})},r.redirect=function(e,t){"string"==typeof e&&"string"==typeof t&&r(e,function(e){setTimeout(function(){r.replace(t)},0)}),"string"==typeof e&&void 0===t&&setTimeout(function(){r.replace(e)},0)},r.replace=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,o.init=n,o.save(),!1!==i&&r.dispatch(o),o},r.dispatch=function(e){function t(){var e=r.exits[s++];if(!e)return n();e(o,t)}function n(){var t=r.callbacks[a++];return e.path!==r.current?void(e.handled=!1):t?void t(e,n):i(e)}var o=d,a=0,s=0;d=e,o?t():n()},r.exit=function(e,t){if("function"==typeof e)return r.exit("*",e);for(var n=new s(e),i=1;i<arguments.length;++i)r.exits.push(n.middleware(arguments[i]))},r.Context=a,a.prototype.pushState=function(){r.len++,history.pushState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},a.prototype.save=function(){history.replaceState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},r.Route=s,s.prototype.middleware=function(e){var t=this;return function(n,r){if(t.match(n.path,n.params))return e(n,r);r()}},s.prototype.match=function(e,t){var n=this.keys,r=e.indexOf("?"),i=~r?e.slice(0,r):e,a=this.regexp.exec(decodeURIComponent(i));if(!a)return!1;for(var s=1,c=a.length;s<c;++s){var u=n[s-1],f=o(a[s]);void 0===f&&hasOwnProperty.call(t,u.name)||(t[u.name]=f)}return!0};var x=function(){var e=!1;if("undefined"!=typeof window)return"complete"===document.readyState?e=!0:window.addEventListener("load",function(){setTimeout(function(){e=!0},0)}),function(t){if(e)if(t.state){var n=t.state.path;r.replace(n,t.state)}else r.show(v.pathname+v.hash,void 0,void 0,!1)}}();r.sameOrigin=f}).call(this,e("_process"))},{_process:2,"path-to-regexp":3}],2:[function(e,t,n){function r(){}var i=t.exports={};i.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.MutationObserver,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};var r=[];if(t){var i=document.createElement("div");return new MutationObserver(function(){var e=r.slice();r.length=0,e.forEach(function(e){e()})}).observe(i,{attributes:!0}),function(e){r.length||i.setAttribute("yes","no"),r.push(e)}}return n?(window.addEventListener("message",function(e){var t=e.source;if((t===window||null===t)&&"process-tick"===e.data&&(e.stopPropagation(),r.length>0)){r.shift()()}},!0),function(e){r.push(e),window.postMessage("process-tick","*")}):function(e){setTimeout(e,0)}}(),i.title="browser",i.browser=!0,i.env={},i.argv=[],i.on=r,i.addListener=r,i.once=r,i.off=r,i.removeListener=r,i.removeAllListeners=r,i.emit=r,i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")}},{}],3:[function(e,t,n){function r(e){for(var t,n=[],r=0,i=0,o="";null!=(t=w.exec(e));){var a=t[0],c=t[1],u=t.index;if(o+=e.slice(i,u),i=u+a.length,c)o+=c[1];else{o&&(n.push(o),o="");var f=t[2],p=t[3],h=t[4],d=t[5],l=t[6],v=t[7],m="+"===l||"*"===l,g="?"===l||"*"===l,y=f||"/",x=h||d||(v?".*":"[^"+y+"]+?");n.push({name:p||r++,prefix:f||"",delimiter:y,optional:g,repeat:m,pattern:s(x)})}}return i<e.length&&(o+=e.substr(i)),o&&n.push(o),n}function i(e){return o(r(e))}function o(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^"+e[n].pattern+"$"));return function(n){for(var r="",i=n||{},o=0;o<e.length;o++){var a=e[o];if("string"!=typeof a){var s,c=i[a.name];if(null==c){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to be defined')}if(v(c)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but received "'+c+'"');if(0===c.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var u=0;u<c.length;u++){if(s=encodeURIComponent(c[u]),!t[o].test(s))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=(0===u?a.prefix:a.delimiter)+s}}else{if(s=encodeURIComponent(c),!t[o].test(s))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=a.prefix+s}}else r+=a}return r}}function a(e){return e.replace(/([.+*?=^!:${}()[\]|\/])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function u(e){return e.sensitive?"":"i"}function f(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return c(e,t)}function p(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(l(e[i],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",u(n)),t)}function h(e,t,n){for(var i=r(e),o=d(i,n),a=0;a<i.length;a++)"string"!=typeof i[a]&&t.push(i[a]);return c(o,t)}function d(e,t){t=t||{};for(var n=t.strict,r=!1!==t.end,i="",o=e[e.length-1],s="string"==typeof o&&/\/$/.test(o),c=0;c<e.length;c++){var f=e[c];if("string"==typeof f)i+=a(f);else{var p=a(f.prefix),h=f.pattern;f.repeat&&(h+="(?:"+p+h+")*"),h=f.optional?p?"(?:"+p+"("+h+"))?":"("+h+")?":p+"("+h+")",i+=h}}return n||(i=(s?i.slice(0,-2):i)+"(?:\\/(?=$))?"),i+=r?"$":n&&s?"":"(?=\\/|$)",new RegExp("^"+i,u(t))}function l(e,t,n){return t=t||[],v(t)?n||(n={}):(n=t,t=[]),e instanceof RegExp?f(e,t,n):v(e)?p(e,t,n):h(e,t,n)}var v=e("isarray");t.exports=l,t.exports.parse=r,t.exports.compile=i,t.exports.tokensToFunction=o,t.exports.tokensToRegExp=d;var w=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))"].join("|"),"g")},{isarray:4}],4:[function(e,t,n){t.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},{}]},{},[1])(1)});
/*!
 * EventEmitter v5.0.0 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */
(function(){"use strict";function t(){}function i(t,n){for(var e=t.length;e--;)if(t[e].listener===n)return e;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var e=t.prototype,r=this,s=r.EventEmitter;e.getListeners=function(n){var r,e,t=this._getEvents();if(n instanceof RegExp){r={};for(e in t)t.hasOwnProperty(e)&&n.test(e)&&(r[e]=t[e])}else r=t[n]||(t[n]=[]);return r},e.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},e.getListenersAsObject=function(n){var e,t=this.getListeners(n);return t instanceof Array&&(e={},e[n]=t),e||t},e.addListener=function(r,e){var t,n=this.getListenersAsObject(r),s="object"==typeof e;for(t in n)n.hasOwnProperty(t)&&-1===i(n[t],e)&&n[t].push(s?e:{listener:e,once:!1});return this},e.on=n("addListener"),e.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},e.once=n("addOnceListener"),e.defineEvent=function(e){return this.getListeners(e),this},e.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},e.removeListener=function(r,s){var n,e,t=this.getListenersAsObject(r);for(e in t)t.hasOwnProperty(e)&&(n=i(t[e],s),-1!==n&&t[e].splice(n,1));return this},e.off=n("removeListener"),e.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},e.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},e.manipulateListeners=function(r,t,i){var e,n,s=r?this.removeListener:this.addListener,o=r?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(e=i.length;e--;)s.call(this,t,i[e]);else for(e in t)t.hasOwnProperty(e)&&(n=t[e])&&("function"==typeof n?s.call(this,e,n):o.call(this,e,n));return this},e.removeEvent=function(e){var t,r=typeof e,n=this._getEvents();if("string"===r)delete n[e];else if(e instanceof RegExp)for(t in n)n.hasOwnProperty(t)&&e.test(t)&&delete n[t];else delete this._events;return this},e.removeAllListeners=n("removeEvent"),e.emitEvent=function(n,u){var r,e,t,i,o,s=this.getListenersAsObject(n);for(i in s)if(s.hasOwnProperty(i))for(r=s[i].slice(0),t=0;t<r.length;t++)e=r[t],e.once===!0&&this.removeListener(n,e.listener),o=e.listener.apply(this,u||[]),o===this._getOnceReturnValue()&&this.removeListener(n,e.listener);return this},e.trigger=n("emitEvent"),e.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},e.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},e._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},e._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=s,t},"function"==typeof define&&define.amd?define(function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}).call(this);
/* docma (dust) compiled templates */
(function(dust){dust.register("docma-404",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><br /><br /><h1>404</h1><hr /><h3>Page Not Found</h3><br />The file or page you have requested is not found. &nbsp;&nbsp;<br />Please make sure page address is entered correctly.</div></div><br /><br /><br /></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-api",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{}).x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_1},{}).w("<div id=\"wrapper\">").x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_2},{}).w("<div id=\"page-content-wrapper\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-lg-12\">").s(ctx.get(["documentation"], false),ctx,{"block":body_3},{}).w("</div></div><br /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-toggle\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div id=\"sidebar-wrapper\">").p("sidebar",ctx,ctx,{}).w("</div>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-content",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><div id=\"docma-content\"></div></div></div><br /><hr /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("enums",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["$members"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Enumeration</th><th>Type</th><th>Value</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["$members"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.getPath(true, []),ctx,"h",["$longname","s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$val"]).w("</code></td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navbar",body_0);function body_0(chk,ctx){return chk.x(ctx.getPath(false, ["template","options","navbar"]),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<nav class=\"navbar navbar-default navbar-fixed-top\"><div class=\"").x(ctx.get(["boxed"], false),ctx,{"else":body_2,"block":body_3},{}).w("\"><div class=\"nav navbar-left nav-left\"><div class=\"navbar-brand\"><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></div></div>").h("gt",ctx,{"block":body_4},{"key":ctx.getPath(false, ["template","options","navItems","length"]),"value":0},"h").w("</div></nav>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("container-fluid");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("container container-boxed");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<ul class=\"nav navbar-nav\">").s(ctx.getPath(false, ["template","options","navItems"]),ctx,{"block":body_5},{}).w("</ul>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.x(ctx.get(["items"], false),ctx,{"else":body_6,"block":body_7},{});}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<li class=\"dropdown\"><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_8,"block":body_9},{}).w("\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;").f(ctx.get(["label"], false),ctx,"h").w("&nbsp;<span class=\"caret\"></span></a><ul class=\"dropdown-menu\">").s(ctx.get(["items"], false),ctx,{"block":body_10},{}).w("</ul></li>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("#");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_10.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navitem",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["separator"], false),ctx,{"else":body_1,"block":body_5},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<li><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_2,"block":body_3},{}).w("\" target=\"").f(ctx.get(["target"], false),ctx,"h").w("\">").x(ctx.get(["iconClass"], false),ctx,{"block":body_4},{}).f(ctx.get(["label"], false),ctx,"h",["s"]).w("</a></li>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("#");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<li role=\"separator\" class=\"divider\"></li>");}body_5.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("params",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["params"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["params"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").x(ctx.get(["optional"], false),ctx,{"block":body_3},{}).w("</td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$param_desc"]).w("</td></tr>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<code>").f(ctx.getPath(true, []),ctx,"h",["$def"]).w("</code>");}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("properties",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["properties"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["properties"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").f(ctx.get(["description"], false),ctx,"h",["s","$p"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("sidebar",body_0);function body_0(chk,ctx){return chk.w("<div class=\"sidebar-header\"><div class=\"sidebar-title\"><span><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></span></div>").x(ctx.getPath(false, ["template","options","search"]),ctx,{"block":body_1},{}).w("</div><div class=\"sidebar-nav-container\"><ul class=\"sidebar-nav\">").s(ctx.get(["symbols"], false),ctx,{"block":body_2},{}).w("</ul><div class=\"sidebar-nav-space\"></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-search\"><input id=\"txt-search\" type=\"search\" class=\"form-control\" placeholder=\"Search...\" /><div class=\"sidebar-search-clean\"><span class=\"glyphicon glyphicon-remove-circle\"></span></div></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$menuitem"]).w("</li>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("symbol",body_0);function body_0(chk,ctx){return chk.w("<div id=\"").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\" class=\"symbol-container\"><div class=\"symbol-heading\"><div class=\"symbol\"><a href=\"#").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\"><span class=\"glyphicon glyphicon-link color-gray-light\" aria-hidden=\"true\"></span><code class=\"symbol-name\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$longname_params"]).w("</code><span class=\"symbol-sep\">").f(ctx.get(["symbol"], false),ctx,"h",["$type_sep"]).w("</span><code class=\"symbol-type\">").f(ctx.get(["symbol"], false),ctx,"h",["$type"]).w("</code></a>").f(ctx.get(["symbol"], false),ctx,"h",["s","$tags"]).w("</div>").x(ctx.getPath(false, ["symbol","augments"]),ctx,{"block":body_1},{}).x(ctx.getPath(false, ["symbol","alias"]),ctx,{"block":body_2},{}).w("</div><div class=\"symbol-definition\">").x(ctx.getPath(false, ["symbol","classdesc"]),ctx,{"block":body_3},{}).f(ctx.get(["symbol"], false),ctx,"h",["s","$desc"]).x(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_8},{}).h("eq",ctx,{"else":body_13,"block":body_16},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","returns"]),ctx,{"block":body_17},{}).x(ctx.getPath(false, ["symbol","exceptions"]),ctx,{"block":body_20},{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"block":body_23},{}).x(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_24},{}).x(ctx.getPath(false, ["template","options","symbolMeta"]),ctx,{"block":body_26},{}).w("</div></div><hr />").h("eq",ctx,{"block":body_30},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_32,"block":body_34},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Extends:</b> ").f(ctx.get(["symbol"], false),ctx,"h",["s","$extends"]).w("</p>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Alias:</b> <code>").f(ctx.getPath(false, ["symbol","alias"]),ctx,"h",["s","$dot_prop"]).w("</code></p>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<table>").x(ctx.getPath(false, ["symbol","version"]),ctx,{"block":body_4},{}).x(ctx.getPath(false, ["symbol","copyright"]),ctx,{"block":body_5},{}).x(ctx.getPath(false, ["symbol","author"]),ctx,{"block":body_6},{}).x(ctx.getPath(false, ["symbol","license"]),ctx,{"block":body_7},{}).w("</table><br />");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<tr><td><b>Version:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","version"]),ctx,"h",["s"]).w("</td></tr>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<tr><td><b>Copyright:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","copyright"]),ctx,"h",["s"]).w("</td></tr>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<tr><td><b>Author:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","author"]),ctx,"h",["s","$author"]).w("</td></tr>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<tr><td><b>License:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","license"]),ctx,"h",["s"]).w("</td></tr>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("<p><b>See</b>").h("gt",ctx,{"else":body_9,"block":body_11},{"key":ctx.getPath(false, ["symbol","see","length"]),"value":1},"h").w("</p><br />");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_10},{});}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]);}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("<ul>").s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_12},{}).w("</ul>");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]).w("</li>");}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.p("params",ctx,ctx.rebase(ctx.get(["symbol"], false)),{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_14,"block":body_15},{});}body_13.__dustBody=!0;function body_14(chk,ctx){return chk.p("properties",ctx,ctx.rebase(ctx.get(["symbol"], false)),{});}body_14.__dustBody=!0;function body_15(chk,ctx){return chk;}body_15.__dustBody=!0;function body_16(chk,ctx){return chk;}body_16.__dustBody=!0;function body_17(chk,ctx){return chk.h("gt",ctx,{"else":body_18,"block":body_19},{"key":ctx.getPath(false, ["symbol","returns","length"]),"value":"1","type":"number"},"h");}body_17.__dustBody=!0;function body_18(chk,ctx){return chk.w("<p><b>Returns:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_18.__dustBody=!0;function body_19(chk,ctx){return chk.w("<b>Returns:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_19.__dustBody=!0;function body_20(chk,ctx){return chk.h("gt",ctx,{"else":body_21,"block":body_22},{"key":ctx.getPath(false, ["symbol","exceptions","length"]),"value":"1","type":"number"},"h");}body_20.__dustBody=!0;function body_21(chk,ctx){return chk.w("<p><b>Throws:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_21.__dustBody=!0;function body_22(chk,ctx){return chk.w("<b>Throws:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_22.__dustBody=!0;function body_23(chk,ctx){return chk.p("enums",ctx,ctx.rebase(ctx.get(["symbol"], false)),{});}body_23.__dustBody=!0;function body_24(chk,ctx){return chk.w("<p><b>Example</b></p>").s(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_25},{});}body_24.__dustBody=!0;function body_25(chk,ctx){return chk.w("<pre><code>").f(ctx.getPath(true, []),ctx,"h",["$nt"]).w("</code></pre>");}body_25.__dustBody=!0;function body_26(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_27},{});}body_26.__dustBody=!0;function body_27(chk,ctx){return chk.w("<p class=\"symbol-meta\">").x(ctx.getPath(false, ["symbol","meta","filename"]),ctx,{"block":body_28},{}).x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_29},{}).w("</p>");}body_27.__dustBody=!0;function body_28(chk,ctx){return chk.w("<b>File:</b> ").f(ctx.getPath(false, ["symbol","meta","filename"]),ctx,"h").w("&nbsp;&nbsp;");}body_28.__dustBody=!0;function body_29(chk,ctx){return chk.w("<b>Line:</b> ").f(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,"h").w("&nbsp;&nbsp;");}body_29.__dustBody=!0;function body_30(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","$constructor"]),ctx,{"block":body_31},{});}body_30.__dustBody=!0;function body_31(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(false, ["symbol","$constructor"]),"template":ctx.get(["template"], false)});}body_31.__dustBody=!0;function body_32(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","$members"]),ctx,{"block":body_33},{});}body_32.__dustBody=!0;function body_33(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_33.__dustBody=!0;function body_34(chk,ctx){return chk;}body_34.__dustBody=!0;return body_0}(dust));
/*!
 * Docma (Web) Core
 * https://github.com/onury/docma
 * @license MIT
 */
var docma = {"routes":[{"id":"api:","type":"api","name":"_def_","path":"/?api","contentPath":null},{"id":"content:guide","type":"content","name":"guide","path":"/?content=guide","contentPath":"content/guide.html"},{"id":"content:examples","type":"content","name":"examples","path":"/?content=examples","contentPath":"content/examples.html"},{"id":"content:msgbox","type":"content","name":"msgbox","path":"/?content=msgbox","contentPath":"content/msgbox.html"},{"id":"content:progressbar","type":"content","name":"progressbar","path":"/?content=progressbar","contentPath":"content/progressbar.html"}],"apis":{"_def_":{"documentation":[{"comment":"/**\n * @class CheckBox\n *\n * Constructs a CheckBox control.\n *\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[237,2396],"filename":"CheckBox.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002435","name":"CheckBox","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"CheckBox\n\nConstructs a CheckBox control.","augments":["ThreeButtonControl","Control"],"name":"CheckBox","longname":"CheckBox","scope":"global","params":[],"$longname":"CheckBox","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"CheckBox#availableOptions","kind":"function","memberof":"CheckBox","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"CheckBox#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"CheckBox#close","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"CheckBox#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"CheckBox#debug","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"CheckBox#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"CheckBox#float","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"CheckBox#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"CheckBox#getArguments","kind":"function","memberof":"CheckBox","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"CheckBox#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {CheckBoxResult}\n   */","meta":{"range":[749,803],"filename":"CheckBox.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002502","name":"CheckBox#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["CheckBoxResult"]}}],"name":"getResult","longname":"CheckBox#getResult","kind":"function","memberof":"CheckBox","scope":"instance","params":[],"overrides":"Control#getResult","$longname":"CheckBox#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"CheckBox#mapSeries","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"CheckBox#mapSeries"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"CheckBox#setButtons","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"$longname":"CheckBox#setButtons"},{"comment":"/**\n   * Sets which items are checked when the control opens.\n   *\n   * @param {Array} checked\n   *   An array of item indices to set as checked.\n   *\n   * @return {Control.<CheckBox>}\n   */","meta":{"range":[1000,1077],"filename":"CheckBox.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002510","name":"CheckBox#setChecked","type":"MethodDefinition","paramnames":["checked"]},"vars":{"":null}},"description":"Sets which items are checked when the control opens.","params":[{"type":{"names":["Array"]},"description":"An array of item indices to set as checked.","name":"checked"}],"returns":[{"type":{"names":["Control.<CheckBox>"]}}],"name":"setChecked","longname":"CheckBox#setChecked","kind":"function","memberof":"CheckBox","scope":"instance","$longname":"CheckBox#setChecked"},{"comment":"/**\n   * Sets the number of columns the items should fit into.\n   *\n   * @param {Number} [columns=0]\n   *   The amount of columns to set.\n   *\n   * @return {Control.<CheckBox>}\n   */","meta":{"range":[1266,1359],"filename":"CheckBox.js","lineno":64,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002524","name":"CheckBox#setColumns","type":"MethodDefinition","paramnames":["columns"]},"vars":{"":null}},"description":"Sets the number of columns the items should fit into.","params":[{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"The amount of columns to set.","name":"columns"}],"returns":[{"type":{"names":["Control.<CheckBox>"]}}],"name":"setColumns","longname":"CheckBox#setColumns","kind":"function","memberof":"CheckBox","scope":"instance","$longname":"CheckBox#setColumns"},{"comment":"/**\n   * Sets which items are disabled when the control opens.\n   *\n   * @param {Array} disabled\n   *   An array of item indices to set as disabled.\n   *\n   * @return {Control.<CheckBox>}\n   */","meta":{"range":[1559,1640],"filename":"CheckBox.js","lineno":76,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002541","name":"CheckBox#setDisabled","type":"MethodDefinition","paramnames":["disabled"]},"vars":{"":null}},"description":"Sets which items are disabled when the control opens.","params":[{"type":{"names":["Array"]},"description":"An array of item indices to set as disabled.","name":"disabled"}],"returns":[{"type":{"names":["Control.<CheckBox>"]}}],"name":"setDisabled","longname":"CheckBox#setDisabled","kind":"function","memberof":"CheckBox","scope":"instance","$longname":"CheckBox#setDisabled"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"CheckBox#setEmptyText","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"$longname":"CheckBox#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"CheckBox#setHeight","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"CheckBox#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"CheckBox#setIcon","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"CheckBox#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"CheckBox#setIconFromBundle","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"CheckBox#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"CheckBox#setIconFromFile","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"CheckBox#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"CheckBox#setIconSize","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"CheckBox#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"CheckBox#setIconType","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"CheckBox#setIconType"},{"comment":"/**\n   * Sets the items for the control.\n   *\n   * @param {Array} items\n   *   An array of item labels.\n   *\n   * @return {Control.<CheckBox>}\n   */","meta":{"range":[1795,1864],"filename":"CheckBox.js","lineno":88,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002555","name":"CheckBox#setItems","type":"MethodDefinition","paramnames":["items"]},"vars":{"":null}},"description":"Sets the items for the control.","params":[{"type":{"names":["Array"]},"description":"An array of item labels.","name":"items"}],"returns":[{"type":{"names":["Control.<CheckBox>"]}}],"name":"setItems","longname":"CheckBox#setItems","kind":"function","memberof":"CheckBox","scope":"instance","$longname":"CheckBox#setItems"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"CheckBox#setLabel","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"$longname":"CheckBox#setLabel"},{"comment":"/**\n   * Sets which items are in a mixed state when the control opens.\n   *\n   * @param {Array} mixed\n   *   An array of item indices to set as mixed.\n   *\n   * @return {Control.<CheckBox>}\n   */","meta":{"range":[2066,2135],"filename":"CheckBox.js","lineno":100,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002569","name":"CheckBox#setMixed","type":"MethodDefinition","paramnames":["mixed"]},"vars":{"":null}},"description":"Sets which items are in a mixed state when the control opens.","params":[{"type":{"names":["Array"]},"description":"An array of item indices to set as mixed.","name":"mixed"}],"returns":[{"type":{"names":["Control.<CheckBox>"]}}],"name":"setMixed","longname":"CheckBox#setMixed","kind":"function","memberof":"CheckBox","scope":"instance","$longname":"CheckBox#setMixed"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"CheckBox#setOption","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"CheckBox#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"CheckBox#setPosition","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"CheckBox#setPosition"},{"comment":"/**\n   * Sets the number of rows the items should fit into.\n   *\n   * @param {Number} [rows=0]\n   *   The amount of rows to set.\n   *\n   * @return {Control.<CheckBox>}\n   */","meta":{"range":[2315,2393],"filename":"CheckBox.js","lineno":112,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002583","name":"CheckBox#setRows","type":"MethodDefinition","paramnames":["rows"]},"vars":{"":null}},"description":"Sets the number of rows the items should fit into.","params":[{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"The amount of rows to set.","name":"rows"}],"returns":[{"type":{"names":["Control.<CheckBox>"]}}],"name":"setRows","longname":"CheckBox#setRows","kind":"function","memberof":"CheckBox","scope":"instance","$longname":"CheckBox#setRows"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"CheckBox#setSize","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"CheckBox#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"CheckBox#setTimeout","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"CheckBox#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"CheckBox#setTitle","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"CheckBox#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"CheckBox#stringOutput","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"CheckBox#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"CheckBox#valueRequired","kind":"function","memberof":"CheckBox","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"$longname":"CheckBox#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[313,377],"filename":"CheckBox.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002439","name":"CheckBox","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"CheckBox","longname":"CheckBox","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"CheckBox"}},{"comment":"/**\n * @class CheckBoxResult\n *\n * Constructs a result object for the CheckBox control.\n *\n * @extends ThreeButtonControlResult\n */","meta":{"range":[211,1446],"filename":"CheckBoxResult.js","lineno":10,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002613","name":"CheckBoxResult","type":"ClassDeclaration","paramnames":["control"]}},"kind":"class","classdesc":"CheckBoxResult\n\nConstructs a result object for the CheckBox control.","augments":["ThreeButtonControlResult"],"name":"CheckBoxResult","longname":"CheckBoxResult","scope":"global","params":[],"$longname":"CheckBoxResult","$members":[{"comment":"/**\n   * Aborts the result.\n   *\n   * @param {String} [message='Aborted!']\n   *   The message to use for CocoaDialogAbort.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[846,936],"filename":"ControlResult.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001611","name":"ControlResult#abort","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Aborts the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Aborted!'","description":"The message to use for CocoaDialogAbort.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"abort","longname":"CheckBoxResult#abort","kind":"function","memberof":"CheckBoxResult","scope":"instance","inherits":"ControlResult#abort","inherited":true,"$longname":"CheckBoxResult#abort"},{"comment":"/**\n     * The current button.\n     *\n     * @type {String|Number|null}\n     */","meta":{"range":[409,427],"filename":"ThreeButtonControlResult.js","lineno":23,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002253","name":"this.button","type":"Literal","value":null,"paramnames":[]}},"description":"The current button.","type":{"names":["String","Number","null"]},"name":"button","longname":"CheckBoxResult#button","kind":"member","memberof":"CheckBoxResult","scope":"instance","inherits":"ThreeButtonControlResult#button","inherited":true,"$longname":"CheckBoxResult#button"},{"comment":"/**\n     * Checked item keys.\n     *\n     * @type {Array}\n     */","meta":{"range":[417,434],"filename":"CheckBoxResult.js","lineno":23,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002627","name":"this.checked","type":"ArrayExpression","value":"[]","paramnames":[]}},"description":"Checked item keys.","type":{"names":["Array"]},"name":"checked","longname":"CheckBoxResult#checked","kind":"member","memberof":"CheckBoxResult","scope":"instance","$longname":"CheckBoxResult#checked"},{"comment":"/**\n   * Indicates whether result has been aborted.\n   *\n   * Note: this can be true if timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[1900,1987],"filename":"ControlResult.js","lineno":77,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001774","name":"ControlResult#hasAborted","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has been aborted.\n\nNote: this can be true if timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasAborted","longname":"CheckBoxResult#hasAborted","kind":"function","memberof":"CheckBoxResult","scope":"instance","params":[],"inherits":"ControlResult#hasAborted","inherited":true,"$longname":"CheckBoxResult#hasAborted"},{"comment":"/**\n   * Indicates whether result has an error.\n   *\n   * Note: this can be true if aborted or timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2133,2218],"filename":"ControlResult.js","lineno":88,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001790","name":"ControlResult#hasError","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has an error.\n\nNote: this can be true if aborted or timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasError","longname":"CheckBoxResult#hasError","kind":"function","memberof":"CheckBoxResult","scope":"instance","params":[],"inherits":"ControlResult#hasError","inherited":true,"$longname":"CheckBoxResult#hasError"},{"comment":"/**\n   * Indicates whether result has timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2307,2397],"filename":"ControlResult.js","lineno":97,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001806","name":"ControlResult#hasTimedOut","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasTimedOut","longname":"CheckBoxResult#hasTimedOut","kind":"function","memberof":"CheckBoxResult","scope":"instance","params":[],"inherits":"ControlResult#hasTimedOut","inherited":true,"$longname":"CheckBoxResult#hasTimedOut"},{"comment":"/**\n     * Items.\n     *\n     * @type {Array}\n     */","meta":{"range":[589,604],"filename":"CheckBoxResult.js","lineno":37,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002639","name":"this.items","type":"ArrayExpression","value":"[]","paramnames":[]}},"description":"Items.","type":{"names":["Array"]},"name":"items","longname":"CheckBoxResult#items","kind":"member","memberof":"CheckBoxResult","scope":"instance","$longname":"CheckBoxResult#items"},{"comment":"/**\n     * Mixed item keys.\n     *\n     * @type {Array}\n     */","meta":{"range":[509,524],"filename":"CheckBoxResult.js","lineno":30,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002633","name":"this.mixed","type":"ArrayExpression","value":"[]","paramnames":[]}},"description":"Mixed item keys.","type":{"names":["Array"]},"name":"mixed","longname":"CheckBoxResult#mixed","kind":"member","memberof":"CheckBoxResult","scope":"instance","$longname":"CheckBoxResult#mixed"},{"comment":"/**\n   * Processes the final result.\n   */","meta":{"range":[985,1761],"filename":"ControlResult.js","lineno":47,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001626","name":"ControlResult#process","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Processes the final result.","name":"process","longname":"CheckBoxResult#process","kind":"function","memberof":"CheckBoxResult","scope":"instance","params":[],"inherits":"ControlResult#process","inherited":true,"overrides":"ThreeButtonControlResult#process","$longname":"CheckBoxResult#process"},{"comment":"/**\n   * Sets an error on the result.\n   *\n   * @param {String|CocoaDialogError} [message='Error!']\n   *   The message to use for CocoaDialogError.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2591,2790],"filename":"ControlResult.js","lineno":109,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001822","name":"ControlResult#setError","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Sets an error on the result.","params":[{"type":{"names":["String","CocoaDialogError"]},"optional":true,"defaultvalue":"'Error!'","description":"The message to use for CocoaDialogError.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"setError","longname":"CheckBoxResult#setError","kind":"function","memberof":"CheckBoxResult","scope":"instance","inherits":"ControlResult#setError","inherited":true,"$longname":"CheckBoxResult#setError"},{"comment":"/**\n   * Times out the result.\n   *\n   * @param {String} [message='Timed out!']\n   *   The message to use for CocoaDialogTimeout.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2966,3062],"filename":"ControlResult.js","lineno":127,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001851","name":"ControlResult#timeout","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Times out the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Timed out!'","description":"The message to use for CocoaDialogTimeout.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"timeout","longname":"CheckBoxResult#timeout","kind":"function","memberof":"CheckBoxResult","scope":"instance","inherits":"ControlResult#timeout","inherited":true,"$longname":"CheckBoxResult#timeout"},{"comment":"/**\n     * Unchecked item keys.\n     *\n     * @type {Array}\n     */","meta":{"range":[683,702],"filename":"CheckBoxResult.js","lineno":44,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002645","name":"this.unchecked","type":"ArrayExpression","value":"[]","paramnames":[]}},"description":"Unchecked item keys.","type":{"names":["Array"]},"name":"unchecked","longname":"CheckBoxResult#unchecked","kind":"member","memberof":"CheckBoxResult","scope":"instance","$longname":"CheckBoxResult#unchecked"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[299,791],"filename":"CheckBoxResult.js","lineno":15,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002617","name":"CheckBoxResult","type":"MethodDefinition","paramnames":["control"]},"vars":{"":null}},"inheritdoc":"","name":"CheckBoxResult","longname":"CheckBoxResult","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"CheckBoxResult"}},{"comment":"/**\n * @class CocoaDialogAbort\n *\n * Constructs an abort based error message.\n *\n * @extends CocoaDialogError\n * @extends Error\n */","meta":{"range":[189,240],"filename":"CocoaDialogAbort.js","lineno":11,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000025","name":"CocoaDialogAbort","type":"ClassDeclaration","paramnames":[]}},"kind":"class","classdesc":"CocoaDialogAbort\n\nConstructs an abort based error message.","augments":["CocoaDialogError","Error"],"name":"CocoaDialogAbort","longname":"CocoaDialogAbort","scope":"global","$longname":"CocoaDialogAbort"},{"comment":"/**\n * @class CocoaDialogAbort\n *\n * Constructs a cocoaDialog based error message.\n *\n * @extends Error\n */","meta":{"range":[108,726],"filename":"CocoaDialogError.js","lineno":8,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000036","name":"CocoaDialogError","type":"ClassDeclaration","paramnames":["message","args"]}},"kind":"class","classdesc":"CocoaDialogAbort\n\nConstructs a cocoaDialog based error message.","augments":["Error"],"name":"CocoaDialogError","longname":"CocoaDialogError","scope":"global","description":"Constructs a new instance.","params":[{"type":{"names":["String"]},"description":"The message to display.","name":"message"},{"type":{"names":["*"]},"optional":true,"variable":true,"description":"Additional arguments to pass onto Error.","name":"args"}],"$longname":"CocoaDialogError","$constructor":{"comment":"/**\n   * Constructs a new instance.\n   *\n   * @param {String} message\n   *   The message to display.\n   * @param {...*} [args]\n   *   Additional arguments to pass onto Error.\n   */","meta":{"range":[333,723],"filename":"CocoaDialogError.js","lineno":18,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000040","name":"CocoaDialogError","type":"MethodDefinition","paramnames":["message","args"]},"vars":{"":null}},"description":"Constructs a new instance.","params":[{"type":{"names":["String"]},"description":"The message to display.","name":"message"},{"type":{"names":["*"]},"optional":true,"variable":true,"description":"Additional arguments to pass onto Error.","name":"args"}],"name":"CocoaDialogError","longname":"CocoaDialogError","kind":"class","scope":"global","undocumented":true,"$longname":"CocoaDialogError"}},{"comment":"/**\n * @class CocoaDialogTimeout\n *\n * Constructs a timed out based error message.\n *\n * @extends CocoaDialogAbort\n * @extends CocoaDialogError\n * @extends Error\n */","meta":{"range":[223,276],"filename":"CocoaDialogTimeout.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000119","name":"CocoaDialogTimeout","type":"ClassDeclaration","paramnames":[]}},"kind":"class","classdesc":"CocoaDialogTimeout\n\nConstructs a timed out based error message.","augments":["CocoaDialogAbort","CocoaDialogError","Error"],"name":"CocoaDialogTimeout","longname":"CocoaDialogTimeout","scope":"global","$longname":"CocoaDialogTimeout"},{"comment":"/**\n * @class Control\n *\n * The base class for all controls.\n */","meta":{"range":[1033,14035],"filename":"Control.js","lineno":29,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000230","name":"Control","type":"ClassDeclaration","paramnames":["name","options"]}},"kind":"class","classdesc":"Control\n\nThe base class for all controls.","name":"Control","longname":"Control","scope":"global","description":"Constructs a new instance.","params":[{"type":{"names":["String"]},"description":"The name of the control.","name":"name"},{"type":{"names":["Object"]},"optional":true,"variable":true,"description":"One or more option objects to initialize control with.","name":"options"}],"$longname":"Control","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"Control#availableOptions","kind":"function","memberof":"Control","scope":"instance","params":[],"$longname":"Control#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"Control#close","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"Control#debug","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"Control#float","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"Control#getArguments","kind":"function","memberof":"Control","scope":"instance","params":[],"$longname":"Control#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[5326,5379],"filename":"Control.js","lineno":220,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000630","name":"Control#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["ControlResult"]}}],"name":"getResult","longname":"Control#getResult","kind":"function","memberof":"Control","scope":"instance","params":[],"$longname":"Control#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"Control#mapSeries","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#mapSeries"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"Control#setHeight","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"Control#setIcon","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"Control#setIconFromBundle","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"Control#setIconFromFile","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"Control#setIconSize","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"Control#setIconType","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#setIconType"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"Control#setOption","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"Control#setPosition","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"Control#setSize","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"Control#setTimeout","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"Control#setTitle","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"Control#stringOutput","kind":"function","memberof":"Control","scope":"instance","$longname":"Control#stringOutput"}],"$constructor":{"comment":"/**\n   * Constructs a new instance.\n   *\n   * @param {String} name\n   *   The name of the control.\n   * @param {...Object} [options]\n   *   One or more option objects to initialize control with.\n   *\n   * @constructor\n   */","meta":{"range":[1278,1908],"filename":"Control.js","lineno":41,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000233","name":"Control","type":"MethodDefinition","paramnames":["name","options"]},"vars":{"":null}},"description":"Constructs a new instance.","params":[{"type":{"names":["String"]},"description":"The name of the control.","name":"name"},{"type":{"names":["Object"]},"optional":true,"variable":true,"description":"One or more option objects to initialize control with.","name":"options"}],"kind":"class","name":"Control","longname":"Control","scope":"global","undocumented":true,"$longname":"Control"}},{"comment":"/**\n * @class ControlResult\n *\n * Constructs the base result object for a control.\n */","meta":{"range":[340,3065],"filename":"ControlResult.js","lineno":14,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001569","name":"ControlResult","type":"ClassDeclaration","paramnames":["control"]}},"kind":"class","classdesc":"ControlResult\n\nConstructs the base result object for a control.","name":"ControlResult","longname":"ControlResult","scope":"global","description":"Construct a new instance.","params":[{"type":{"names":["Control"]},"description":"The control this result belongs to.","name":"control"}],"$longname":"ControlResult","$members":[{"comment":"/**\n   * Aborts the result.\n   *\n   * @param {String} [message='Aborted!']\n   *   The message to use for CocoaDialogAbort.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[846,936],"filename":"ControlResult.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001611","name":"ControlResult#abort","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Aborts the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Aborted!'","description":"The message to use for CocoaDialogAbort.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"abort","longname":"ControlResult#abort","kind":"function","memberof":"ControlResult","scope":"instance","$longname":"ControlResult#abort"},{"comment":"/**\n   * Indicates whether result has been aborted.\n   *\n   * Note: this can be true if timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[1900,1987],"filename":"ControlResult.js","lineno":77,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001774","name":"ControlResult#hasAborted","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has been aborted.\n\nNote: this can be true if timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasAborted","longname":"ControlResult#hasAborted","kind":"function","memberof":"ControlResult","scope":"instance","params":[],"$longname":"ControlResult#hasAborted"},{"comment":"/**\n   * Indicates whether result has an error.\n   *\n   * Note: this can be true if aborted or timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2133,2218],"filename":"ControlResult.js","lineno":88,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001790","name":"ControlResult#hasError","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has an error.\n\nNote: this can be true if aborted or timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasError","longname":"ControlResult#hasError","kind":"function","memberof":"ControlResult","scope":"instance","params":[],"$longname":"ControlResult#hasError"},{"comment":"/**\n   * Indicates whether result has timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2307,2397],"filename":"ControlResult.js","lineno":97,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001806","name":"ControlResult#hasTimedOut","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasTimedOut","longname":"ControlResult#hasTimedOut","kind":"function","memberof":"ControlResult","scope":"instance","params":[],"$longname":"ControlResult#hasTimedOut"},{"comment":"/**\n   * Processes the final result.\n   */","meta":{"range":[985,1761],"filename":"ControlResult.js","lineno":47,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001626","name":"ControlResult#process","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Processes the final result.","name":"process","longname":"ControlResult#process","kind":"function","memberof":"ControlResult","scope":"instance","params":[],"$longname":"ControlResult#process"},{"comment":"/**\n   * Sets an error on the result.\n   *\n   * @param {String|CocoaDialogError} [message='Error!']\n   *   The message to use for CocoaDialogError.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2591,2790],"filename":"ControlResult.js","lineno":109,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001822","name":"ControlResult#setError","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Sets an error on the result.","params":[{"type":{"names":["String","CocoaDialogError"]},"optional":true,"defaultvalue":"'Error!'","description":"The message to use for CocoaDialogError.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"setError","longname":"ControlResult#setError","kind":"function","memberof":"ControlResult","scope":"instance","$longname":"ControlResult#setError"},{"comment":"/**\n   * Times out the result.\n   *\n   * @param {String} [message='Timed out!']\n   *   The message to use for CocoaDialogTimeout.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2966,3062],"filename":"ControlResult.js","lineno":127,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001851","name":"ControlResult#timeout","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Times out the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Timed out!'","description":"The message to use for CocoaDialogTimeout.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"timeout","longname":"ControlResult#timeout","kind":"function","memberof":"ControlResult","scope":"instance","$longname":"ControlResult#timeout"}],"$constructor":{"comment":"/**\n   * Construct a new instance.\n   *\n   * @param {Control} control\n   *   The control this result belongs to.\n   *\n   * @constructor\n   */","meta":{"range":[509,677],"filename":"ControlResult.js","lineno":24,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001572","name":"ControlResult","type":"MethodDefinition","paramnames":["control"]},"vars":{"":null}},"description":"Construct a new instance.","params":[{"type":{"names":["Control"]},"description":"The control this result belongs to.","name":"control"}],"kind":"class","name":"ControlResult","longname":"ControlResult","scope":"global","undocumented":true,"$longname":"ControlResult"}},{"comment":"/**\n * @class DropDown\n *\n * Constructs a DropDown control.\n *\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[231,1846],"filename":"DropDown.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002781","name":"DropDown","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"DropDown\n\nConstructs a DropDown control.","augments":["ThreeButtonControl","Control"],"name":"DropDown","longname":"DropDown","scope":"global","params":[],"$longname":"DropDown","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"DropDown#availableOptions","kind":"function","memberof":"DropDown","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"DropDown#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"DropDown#close","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"DropDown#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"DropDown#debug","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"DropDown#debug"},{"comment":"/**\n   * Sets whether control will exit when a selection has been made.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<DropDown>}\n   */","meta":{"range":[822,908],"filename":"DropDown.js","lineno":41,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002833","name":"DropDown#exitOnChange","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will exit when a selection has been made.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<DropDown>"]}}],"name":"exitOnChange","longname":"DropDown#exitOnChange","kind":"function","memberof":"DropDown","scope":"instance","$longname":"DropDown#exitOnChange"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"DropDown#float","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"DropDown#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"DropDown#getArguments","kind":"function","memberof":"DropDown","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"DropDown#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {InputResult}\n   */","meta":{"range":[1006,1063],"filename":"DropDown.js","lineno":50,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002847","name":"DropDown#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["InputResult"]}}],"name":"getResult","longname":"DropDown#getResult","kind":"function","memberof":"DropDown","scope":"instance","params":[],"overrides":"Control#getResult","$longname":"DropDown#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"DropDown#mapSeries","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"DropDown#mapSeries"},{"comment":"/**\n   * Sets whether control will be shown as the \"pull down\" style.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<DropDown>}\n   */","meta":{"range":[1282,1360],"filename":"DropDown.js","lineno":62,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002856","name":"DropDown#pullDown","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will be shown as the \"pull down\" style.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<DropDown>"]}}],"name":"pullDown","longname":"DropDown#pullDown","kind":"function","memberof":"DropDown","scope":"instance","$longname":"DropDown#pullDown"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"DropDown#setButtons","kind":"function","memberof":"DropDown","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"$longname":"DropDown#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"DropDown#setEmptyText","kind":"function","memberof":"DropDown","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"$longname":"DropDown#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"DropDown#setHeight","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"DropDown#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"DropDown#setIcon","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"DropDown#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"DropDown#setIconFromBundle","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"DropDown#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"DropDown#setIconFromFile","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"DropDown#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"DropDown#setIconSize","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"DropDown#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"DropDown#setIconType","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"DropDown#setIconType"},{"comment":"/**\n   * Sets the items for the control.\n   *\n   * @param {Array} items\n   *   An array of item labels.\n   *\n   * @return {Control.<DropDown>}\n   */","meta":{"range":[1515,1584],"filename":"DropDown.js","lineno":74,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002870","name":"DropDown#setItems","type":"MethodDefinition","paramnames":["items"]},"vars":{"":null}},"description":"Sets the items for the control.","params":[{"type":{"names":["Array"]},"description":"An array of item labels.","name":"items"}],"returns":[{"type":{"names":["Control.<DropDown>"]}}],"name":"setItems","longname":"DropDown#setItems","kind":"function","memberof":"DropDown","scope":"instance","$longname":"DropDown#setItems"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"DropDown#setLabel","kind":"function","memberof":"DropDown","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"$longname":"DropDown#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"DropDown#setOption","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"DropDown#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"DropDown#setPosition","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"DropDown#setPosition"},{"comment":"/**\n   * Sets the selected item for the control.\n   *\n   * @param {Number} index\n   *   The index of the item to display as selected.\n   *\n   * @return {Control.<DropDown>}\n   */","meta":{"range":[1769,1843],"filename":"DropDown.js","lineno":86,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002884","name":"DropDown#setSelected","type":"MethodDefinition","paramnames":["index"]},"vars":{"":null}},"description":"Sets the selected item for the control.","params":[{"type":{"names":["Number"]},"description":"The index of the item to display as selected.","name":"index","defaultvalue":0}],"returns":[{"type":{"names":["Control.<DropDown>"]}}],"name":"setSelected","longname":"DropDown#setSelected","kind":"function","memberof":"DropDown","scope":"instance","$longname":"DropDown#setSelected"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"DropDown#setSize","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"DropDown#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"DropDown#setTimeout","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"DropDown#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"DropDown#setTitle","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"DropDown#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"DropDown#stringOutput","kind":"function","memberof":"DropDown","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"DropDown#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"DropDown#valueRequired","kind":"function","memberof":"DropDown","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"$longname":"DropDown#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[307,365],"filename":"DropDown.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002785","name":"DropDown","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"DropDown","longname":"DropDown","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"DropDown"}},{"comment":"/**\n * @class FileControl\n *\n * Constructs a file based control.\n *\n * @extends Control\n */","meta":{"range":[131,2244],"filename":"FileControl.js","lineno":10,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001905","name":"FileControl","type":"ClassDeclaration","paramnames":[]}},"kind":"class","classdesc":"FileControl\n\nConstructs a file based control.","augments":["Control"],"name":"FileControl","longname":"FileControl","scope":"global","$longname":"FileControl","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"FileControl#availableOptions","kind":"function","memberof":"FileControl","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"FileControl#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"FileControl#close","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#close","inherited":true,"$longname":"FileControl#close"},{"comment":"/**\n   * Sets whether control will allow the creation of directories.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[707,803],"filename":"FileControl.js","lineno":34,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001958","name":"FileControl#createDirectories","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will allow the creation of directories.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"createDirectories","longname":"FileControl#createDirectories","kind":"function","memberof":"FileControl","scope":"instance","$longname":"FileControl#createDirectories"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"FileControl#debug","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#debug","inherited":true,"$longname":"FileControl#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"FileControl#float","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#float","inherited":true,"$longname":"FileControl#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"FileControl#getArguments","kind":"function","memberof":"FileControl","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"$longname":"FileControl#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[5326,5379],"filename":"Control.js","lineno":220,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000630","name":"Control#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["ControlResult"]}}],"name":"getResult","longname":"FileControl#getResult","kind":"function","memberof":"FileControl","scope":"instance","params":[],"inherits":"Control#getResult","inherited":true,"$longname":"FileControl#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"FileControl#mapSeries","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#mapSeries","inherited":true,"$longname":"FileControl#mapSeries"},{"comment":"/**\n   * Sets whether control will allow the travers of packages as directories.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1036,1140],"filename":"FileControl.js","lineno":46,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001972","name":"FileControl#packagesAsDirectories","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will allow the travers of packages as directories.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"packagesAsDirectories","longname":"FileControl#packagesAsDirectories","kind":"function","memberof":"FileControl","scope":"instance","$longname":"FileControl#packagesAsDirectories"},{"comment":"/**\n   * Sets the directory that the control will show upon opening.\n   *\n   * @param {String} [path='']\n   *   A file system path.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1326,1405],"filename":"FileControl.js","lineno":58,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001986","name":"FileControl#setDirectory","type":"MethodDefinition","paramnames":["path"]},"vars":{"":null}},"description":"Sets the directory that the control will show upon opening.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"A file system path.","name":"path"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setDirectory","longname":"FileControl#setDirectory","kind":"function","memberof":"FileControl","scope":"instance","$longname":"FileControl#setDirectory"},{"comment":"/**\n   * Sets the allowed extensions types.\n   *\n   * @param {String|Array} extensions\n   *   A string or array of strings that indicate which extensions are allowed.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1626,1766],"filename":"FileControl.js","lineno":70,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002000","name":"FileControl#setExtensions","type":"MethodDefinition","paramnames":["extensions"]},"vars":{"":null}},"description":"Sets the allowed extensions types.","params":[{"type":{"names":["String","Array"]},"description":"A string or array of strings that indicate which extensions are allowed.","name":"extensions"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setExtensions","longname":"FileControl#setExtensions","kind":"function","memberof":"FileControl","scope":"instance","$longname":"FileControl#setExtensions"},{"comment":"/**\n   * Sets the file that the control will show upon opening.\n   *\n   * @param {String} [path='']\n   *   A file system path.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1947,2016],"filename":"FileControl.js","lineno":82,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002023","name":"FileControl#setFile","type":"MethodDefinition","paramnames":["path"]},"vars":{"":null}},"description":"Sets the file that the control will show upon opening.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"A file system path.","name":"path"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setFile","longname":"FileControl#setFile","kind":"function","memberof":"FileControl","scope":"instance","$longname":"FileControl#setFile"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"FileControl#setHeight","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#setHeight","inherited":true,"$longname":"FileControl#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"FileControl#setIcon","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#setIcon","inherited":true,"$longname":"FileControl#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"FileControl#setIconFromBundle","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"$longname":"FileControl#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"FileControl#setIconFromFile","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"$longname":"FileControl#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"FileControl#setIconSize","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#setIconSize","inherited":true,"$longname":"FileControl#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"FileControl#setIconType","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#setIconType","inherited":true,"$longname":"FileControl#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[2172,2241],"filename":"FileControl.js","lineno":94,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002037","name":"FileControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setLabel","longname":"FileControl#setLabel","kind":"function","memberof":"FileControl","scope":"instance","$longname":"FileControl#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"FileControl#setOption","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#setOption","inherited":true,"$longname":"FileControl#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"FileControl#setPosition","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#setPosition","inherited":true,"$longname":"FileControl#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"FileControl#setSize","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#setSize","inherited":true,"$longname":"FileControl#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"FileControl#setTimeout","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#setTimeout","inherited":true,"$longname":"FileControl#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"FileControl#setTitle","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#setTitle","inherited":true,"$longname":"FileControl#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"FileControl#stringOutput","kind":"function","memberof":"FileControl","scope":"instance","inherits":"Control#stringOutput","inherited":true,"$longname":"FileControl#stringOutput"}]},{"comment":"/**\n * @class FileSave\n *\n * Constructs a FileSave control.\n *\n * @extends FileControl\n * @extends Control\n */","meta":{"range":[216,869],"filename":"FileSave.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002917","name":"FileSave","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"FileSave\n\nConstructs a FileSave control.","augments":["FileControl","Control"],"name":"FileSave","longname":"FileSave","scope":"global","params":[],"$longname":"FileSave","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"FileSave#availableOptions","kind":"function","memberof":"FileSave","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"FileSave#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"FileSave#close","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"FileSave#close"},{"comment":"/**\n   * Sets whether control will allow the creation of directories.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[707,803],"filename":"FileControl.js","lineno":34,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001958","name":"FileControl#createDirectories","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will allow the creation of directories.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"createDirectories","longname":"FileSave#createDirectories","kind":"function","memberof":"FileSave","scope":"instance","inherits":"FileControl#createDirectories","inherited":true,"overrides":"FileControl#createDirectories","$longname":"FileSave#createDirectories"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"FileSave#debug","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"FileSave#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"FileSave#float","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"FileSave#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"FileSave#getArguments","kind":"function","memberof":"FileSave","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"FileSave#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {FileSaveResult}\n   */","meta":{"range":[812,866],"filename":"FileSave.js","lineno":44,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002971","name":"FileSave#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["FileSaveResult"]}}],"name":"getResult","longname":"FileSave#getResult","kind":"function","memberof":"FileSave","scope":"instance","params":[],"overrides":"Control#getResult","$longname":"FileSave#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"FileSave#mapSeries","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"FileSave#mapSeries"},{"comment":"/**\n   * Sets whether control will allow the travers of packages as directories.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1036,1140],"filename":"FileControl.js","lineno":46,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001972","name":"FileControl#packagesAsDirectories","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will allow the travers of packages as directories.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"packagesAsDirectories","longname":"FileSave#packagesAsDirectories","kind":"function","memberof":"FileSave","scope":"instance","inherits":"FileControl#packagesAsDirectories","inherited":true,"$longname":"FileSave#packagesAsDirectories"},{"comment":"/**\n   * Sets the directory that the control will show upon opening.\n   *\n   * @param {String} [path='']\n   *   A file system path.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1326,1405],"filename":"FileControl.js","lineno":58,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001986","name":"FileControl#setDirectory","type":"MethodDefinition","paramnames":["path"]},"vars":{"":null}},"description":"Sets the directory that the control will show upon opening.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"A file system path.","name":"path"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setDirectory","longname":"FileSave#setDirectory","kind":"function","memberof":"FileSave","scope":"instance","inherits":"FileControl#setDirectory","inherited":true,"$longname":"FileSave#setDirectory"},{"comment":"/**\n   * Sets the allowed extensions types.\n   *\n   * @param {String|Array} extensions\n   *   A string or array of strings that indicate which extensions are allowed.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1626,1766],"filename":"FileControl.js","lineno":70,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002000","name":"FileControl#setExtensions","type":"MethodDefinition","paramnames":["extensions"]},"vars":{"":null}},"description":"Sets the allowed extensions types.","params":[{"type":{"names":["String","Array"]},"description":"A string or array of strings that indicate which extensions are allowed.","name":"extensions"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setExtensions","longname":"FileSave#setExtensions","kind":"function","memberof":"FileSave","scope":"instance","inherits":"FileControl#setExtensions","inherited":true,"$longname":"FileSave#setExtensions"},{"comment":"/**\n   * Sets the file that the control will show upon opening.\n   *\n   * @param {String} [path='']\n   *   A file system path.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1947,2016],"filename":"FileControl.js","lineno":82,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002023","name":"FileControl#setFile","type":"MethodDefinition","paramnames":["path"]},"vars":{"":null}},"description":"Sets the file that the control will show upon opening.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"A file system path.","name":"path"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setFile","longname":"FileSave#setFile","kind":"function","memberof":"FileSave","scope":"instance","inherits":"FileControl#setFile","inherited":true,"$longname":"FileSave#setFile"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"FileSave#setHeight","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"FileSave#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"FileSave#setIcon","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"FileSave#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"FileSave#setIconFromBundle","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"FileSave#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"FileSave#setIconFromFile","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"FileSave#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"FileSave#setIconSize","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"FileSave#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"FileSave#setIconType","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"FileSave#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[2172,2241],"filename":"FileControl.js","lineno":94,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002037","name":"FileControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setLabel","longname":"FileSave#setLabel","kind":"function","memberof":"FileSave","scope":"instance","inherits":"FileControl#setLabel","inherited":true,"$longname":"FileSave#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"FileSave#setOption","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"FileSave#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"FileSave#setPosition","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"FileSave#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"FileSave#setSize","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"FileSave#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"FileSave#setTimeout","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"FileSave#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"FileSave#setTitle","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"FileSave#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"FileSave#stringOutput","kind":"function","memberof":"FileSave","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"FileSave#stringOutput"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[285,349],"filename":"FileSave.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002921","name":"FileSave","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"FileSave","longname":"FileSave","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"FileSave"}},{"comment":"/**\n * @class FileSaveResult\n *\n * Constructs a result object for the FileSave control.\n *\n * @extends ControlResult\n */","meta":{"range":[178,917],"filename":"FileSaveResult.js","lineno":10,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002992","name":"FileSaveResult","type":"ClassDeclaration","paramnames":["control"]}},"kind":"class","classdesc":"FileSaveResult\n\nConstructs a result object for the FileSave control.","augments":["ControlResult"],"name":"FileSaveResult","longname":"FileSaveResult","scope":"global","params":[],"$longname":"FileSaveResult","$members":[{"comment":"/**\n   * Aborts the result.\n   *\n   * @param {String} [message='Aborted!']\n   *   The message to use for CocoaDialogAbort.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[846,936],"filename":"ControlResult.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001611","name":"ControlResult#abort","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Aborts the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Aborted!'","description":"The message to use for CocoaDialogAbort.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"abort","longname":"FileSaveResult#abort","kind":"function","memberof":"FileSaveResult","scope":"instance","inherits":"ControlResult#abort","inherited":true,"$longname":"FileSaveResult#abort"},{"comment":"/**\n     * The filename provided.\n     *\n     * @type {String}\n     */","meta":{"range":[378,396],"filename":"FileSaveResult.js","lineno":23,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003006","name":"this.filename","type":"Literal","value":"","paramnames":[]}},"description":"The filename provided.","type":{"names":["String"]},"name":"filename","longname":"FileSaveResult#filename","kind":"member","memberof":"FileSaveResult","scope":"instance","$longname":"FileSaveResult#filename"},{"comment":"/**\n   * Indicates whether result has been aborted.\n   *\n   * Note: this can be true if timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[1900,1987],"filename":"ControlResult.js","lineno":77,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001774","name":"ControlResult#hasAborted","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has been aborted.\n\nNote: this can be true if timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasAborted","longname":"FileSaveResult#hasAborted","kind":"function","memberof":"FileSaveResult","scope":"instance","params":[],"inherits":"ControlResult#hasAborted","inherited":true,"$longname":"FileSaveResult#hasAborted"},{"comment":"/**\n   * Indicates whether result has an error.\n   *\n   * Note: this can be true if aborted or timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2133,2218],"filename":"ControlResult.js","lineno":88,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001790","name":"ControlResult#hasError","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has an error.\n\nNote: this can be true if aborted or timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasError","longname":"FileSaveResult#hasError","kind":"function","memberof":"FileSaveResult","scope":"instance","params":[],"inherits":"ControlResult#hasError","inherited":true,"$longname":"FileSaveResult#hasError"},{"comment":"/**\n   * Indicates whether result has timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2307,2397],"filename":"ControlResult.js","lineno":97,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001806","name":"ControlResult#hasTimedOut","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasTimedOut","longname":"FileSaveResult#hasTimedOut","kind":"function","memberof":"FileSaveResult","scope":"instance","params":[],"inherits":"ControlResult#hasTimedOut","inherited":true,"$longname":"FileSaveResult#hasTimedOut"},{"comment":"/**\n   * Processes the final result.\n   */","meta":{"range":[985,1761],"filename":"ControlResult.js","lineno":47,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001626","name":"ControlResult#process","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Processes the final result.","name":"process","longname":"FileSaveResult#process","kind":"function","memberof":"FileSaveResult","scope":"instance","params":[],"inherits":"ControlResult#process","inherited":true,"overrides":"ControlResult#process","$longname":"FileSaveResult#process"},{"comment":"/**\n   * Sets an error on the result.\n   *\n   * @param {String|CocoaDialogError} [message='Error!']\n   *   The message to use for CocoaDialogError.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2591,2790],"filename":"ControlResult.js","lineno":109,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001822","name":"ControlResult#setError","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Sets an error on the result.","params":[{"type":{"names":["String","CocoaDialogError"]},"optional":true,"defaultvalue":"'Error!'","description":"The message to use for CocoaDialogError.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"setError","longname":"FileSaveResult#setError","kind":"function","memberof":"FileSaveResult","scope":"instance","inherits":"ControlResult#setError","inherited":true,"$longname":"FileSaveResult#setError"},{"comment":"/**\n   * Times out the result.\n   *\n   * @param {String} [message='Timed out!']\n   *   The message to use for CocoaDialogTimeout.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2966,3062],"filename":"ControlResult.js","lineno":127,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001851","name":"ControlResult#timeout","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Times out the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Timed out!'","description":"The message to use for CocoaDialogTimeout.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"timeout","longname":"FileSaveResult#timeout","kind":"function","memberof":"FileSaveResult","scope":"instance","inherits":"ControlResult#timeout","inherited":true,"$longname":"FileSaveResult#timeout"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[255,479],"filename":"FileSaveResult.js","lineno":15,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002996","name":"FileSaveResult","type":"MethodDefinition","paramnames":["control"]},"vars":{"":null}},"inheritdoc":"","name":"FileSaveResult","longname":"FileSaveResult","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"FileSaveResult"}},{"comment":"/**\n * @class FileSelect\n *\n * Constructs a FileSelect control.\n *\n * @extends FileControl\n * @extends Control\n */","meta":{"range":[224,2167],"filename":"FileSelect.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003078","name":"FileSelect","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"FileSelect\n\nConstructs a FileSelect control.","augments":["FileControl","Control"],"name":"FileSelect","longname":"FileSelect","scope":"global","params":[],"$longname":"FileSelect","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"FileSelect#availableOptions","kind":"function","memberof":"FileSelect","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"FileSelect#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"FileSelect#close","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"FileSelect#close"},{"comment":"/**\n   * Sets whether control will allow the creation of directories.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[707,803],"filename":"FileControl.js","lineno":34,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001958","name":"FileControl#createDirectories","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will allow the creation of directories.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"createDirectories","longname":"FileSelect#createDirectories","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"FileControl#createDirectories","inherited":true,"$longname":"FileSelect#createDirectories"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"FileSelect#debug","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"FileSelect#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"FileSelect#float","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"FileSelect#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"FileSelect#getArguments","kind":"function","memberof":"FileSelect","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"FileSelect#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {FileSelectResult}\n   */","meta":{"range":[813,869],"filename":"FileSelect.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003143","name":"FileSelect#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["FileSelectResult"]}}],"name":"getResult","longname":"FileSelect#getResult","kind":"function","memberof":"FileSelect","scope":"instance","params":[],"overrides":"Control#getResult","$longname":"FileSelect#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"FileSelect#mapSeries","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"FileSelect#mapSeries"},{"comment":"/**\n   * Sets whether control will allow the travers of packages as directories.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1036,1140],"filename":"FileControl.js","lineno":46,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001972","name":"FileControl#packagesAsDirectories","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will allow the travers of packages as directories.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"packagesAsDirectories","longname":"FileSelect#packagesAsDirectories","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"FileControl#packagesAsDirectories","inherited":true,"$longname":"FileSelect#packagesAsDirectories"},{"comment":"/**\n   * Sets whether the control can select directories.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   * @param {Boolean} [onlyDirectories=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<FileSelect>}\n   */","meta":{"range":[1179,1427],"filename":"FileSelect.js","lineno":54,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003151","name":"FileSelect#selectDirectories","type":"MethodDefinition","paramnames":["enabled","onlyDirectories"]},"vars":{"":null}},"description":"Sets whether the control can select directories.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"onlyDirectories"}],"returns":[{"type":{"names":["Control.<FileSelect>"]}}],"name":"selectDirectories","longname":"FileSelect#selectDirectories","kind":"function","memberof":"FileSelect","scope":"instance","$longname":"FileSelect#selectDirectories"},{"comment":"/**\n   * Sets whether the control can select multiple files.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<FileSelect>}\n   */","meta":{"range":[1639,1783],"filename":"FileSelect.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003181","name":"FileSelect#selectMultiple","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether the control can select multiple files.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<FileSelect>"]}}],"name":"selectMultiple","longname":"FileSelect#selectMultiple","kind":"function","memberof":"FileSelect","scope":"instance","$longname":"FileSelect#selectMultiple"},{"comment":"/**\n   * Sets the allowed files.\n   *\n   * Note: this is primarily only useful when setting the allowed extensions\n   * to \".\", which allows files the have on extension to be selected.\n   *\n   * @param {Array} [files]\n   *   The files to allow.\n   *\n   * @return {Control.<FileSelect>}\n   */","meta":{"range":[2081,2164],"filename":"FileSelect.js","lineno":86,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003201","name":"FileSelect#setAllowedFiles","type":"MethodDefinition","paramnames":["files"]},"vars":{"":null}},"description":"Sets the allowed files.\n\nNote: this is primarily only useful when setting the allowed extensions\nto \".\", which allows files the have on extension to be selected.","params":[{"type":{"names":["Array"]},"optional":true,"description":"The files to allow.","name":"files"}],"returns":[{"type":{"names":["Control.<FileSelect>"]}}],"name":"setAllowedFiles","longname":"FileSelect#setAllowedFiles","kind":"function","memberof":"FileSelect","scope":"instance","$longname":"FileSelect#setAllowedFiles"},{"comment":"/**\n   * Sets the directory that the control will show upon opening.\n   *\n   * @param {String} [path='']\n   *   A file system path.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1326,1405],"filename":"FileControl.js","lineno":58,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001986","name":"FileControl#setDirectory","type":"MethodDefinition","paramnames":["path"]},"vars":{"":null}},"description":"Sets the directory that the control will show upon opening.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"A file system path.","name":"path"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setDirectory","longname":"FileSelect#setDirectory","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"FileControl#setDirectory","inherited":true,"$longname":"FileSelect#setDirectory"},{"comment":"/**\n   * Sets the allowed extensions types.\n   *\n   * @param {String|Array} extensions\n   *   A string or array of strings that indicate which extensions are allowed.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1626,1766],"filename":"FileControl.js","lineno":70,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002000","name":"FileControl#setExtensions","type":"MethodDefinition","paramnames":["extensions"]},"vars":{"":null}},"description":"Sets the allowed extensions types.","params":[{"type":{"names":["String","Array"]},"description":"A string or array of strings that indicate which extensions are allowed.","name":"extensions"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setExtensions","longname":"FileSelect#setExtensions","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"FileControl#setExtensions","inherited":true,"$longname":"FileSelect#setExtensions"},{"comment":"/**\n   * Sets the file that the control will show upon opening.\n   *\n   * @param {String} [path='']\n   *   A file system path.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[1947,2016],"filename":"FileControl.js","lineno":82,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002023","name":"FileControl#setFile","type":"MethodDefinition","paramnames":["path"]},"vars":{"":null}},"description":"Sets the file that the control will show upon opening.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"A file system path.","name":"path"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setFile","longname":"FileSelect#setFile","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"FileControl#setFile","inherited":true,"$longname":"FileSelect#setFile"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"FileSelect#setHeight","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"FileSelect#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"FileSelect#setIcon","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"FileSelect#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"FileSelect#setIconFromBundle","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"FileSelect#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"FileSelect#setIconFromFile","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"FileSelect#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"FileSelect#setIconSize","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"FileSelect#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"FileSelect#setIconType","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"FileSelect#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<FileControl>}\n   */","meta":{"range":[2172,2241],"filename":"FileControl.js","lineno":94,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002037","name":"FileControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<FileControl>"]}}],"name":"setLabel","longname":"FileSelect#setLabel","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"FileControl#setLabel","inherited":true,"$longname":"FileSelect#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"FileSelect#setOption","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"FileSelect#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"FileSelect#setPosition","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"FileSelect#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"FileSelect#setSize","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"FileSelect#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"FileSelect#setTimeout","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"FileSelect#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"FileSelect#setTitle","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"FileSelect#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"FileSelect#stringOutput","kind":"function","memberof":"FileSelect","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"FileSelect#stringOutput"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[295,361],"filename":"FileSelect.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003082","name":"FileSelect","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"FileSelect","longname":"FileSelect","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"FileSelect"}},{"comment":"/**\n * @class FileSelectResult\n *\n * Constructs a result object for the FileSelect control.\n *\n * @extends ControlResult\n */","meta":{"range":[182,819],"filename":"FileSelectResult.js","lineno":10,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003228","name":"FileSelectResult","type":"ClassDeclaration","paramnames":["control"]}},"kind":"class","classdesc":"FileSelectResult\n\nConstructs a result object for the FileSelect control.","augments":["ControlResult"],"name":"FileSelectResult","longname":"FileSelectResult","scope":"global","params":[],"$longname":"FileSelectResult","$members":[{"comment":"/**\n   * Aborts the result.\n   *\n   * @param {String} [message='Aborted!']\n   *   The message to use for CocoaDialogAbort.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[846,936],"filename":"ControlResult.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001611","name":"ControlResult#abort","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Aborts the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Aborted!'","description":"The message to use for CocoaDialogAbort.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"abort","longname":"FileSelectResult#abort","kind":"function","memberof":"FileSelectResult","scope":"instance","inherits":"ControlResult#abort","inherited":true,"$longname":"FileSelectResult#abort"},{"comment":"/**\n   * Indicates whether result has been aborted.\n   *\n   * Note: this can be true if timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[1900,1987],"filename":"ControlResult.js","lineno":77,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001774","name":"ControlResult#hasAborted","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has been aborted.\n\nNote: this can be true if timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasAborted","longname":"FileSelectResult#hasAborted","kind":"function","memberof":"FileSelectResult","scope":"instance","params":[],"inherits":"ControlResult#hasAborted","inherited":true,"$longname":"FileSelectResult#hasAborted"},{"comment":"/**\n   * Indicates whether result has an error.\n   *\n   * Note: this can be true if aborted or timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2133,2218],"filename":"ControlResult.js","lineno":88,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001790","name":"ControlResult#hasError","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has an error.\n\nNote: this can be true if aborted or timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasError","longname":"FileSelectResult#hasError","kind":"function","memberof":"FileSelectResult","scope":"instance","params":[],"inherits":"ControlResult#hasError","inherited":true,"$longname":"FileSelectResult#hasError"},{"comment":"/**\n   * Indicates whether result has timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2307,2397],"filename":"ControlResult.js","lineno":97,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001806","name":"ControlResult#hasTimedOut","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasTimedOut","longname":"FileSelectResult#hasTimedOut","kind":"function","memberof":"FileSelectResult","scope":"instance","params":[],"inherits":"ControlResult#hasTimedOut","inherited":true,"$longname":"FileSelectResult#hasTimedOut"},{"comment":"/**\n   * Processes the final result.\n   */","meta":{"range":[985,1761],"filename":"ControlResult.js","lineno":47,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001626","name":"ControlResult#process","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Processes the final result.","name":"process","longname":"FileSelectResult#process","kind":"function","memberof":"FileSelectResult","scope":"instance","params":[],"inherits":"ControlResult#process","inherited":true,"overrides":"ControlResult#process","$longname":"FileSelectResult#process"},{"comment":"/**\n   * Sets an error on the result.\n   *\n   * @param {String|CocoaDialogError} [message='Error!']\n   *   The message to use for CocoaDialogError.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2591,2790],"filename":"ControlResult.js","lineno":109,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001822","name":"ControlResult#setError","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Sets an error on the result.","params":[{"type":{"names":["String","CocoaDialogError"]},"optional":true,"defaultvalue":"'Error!'","description":"The message to use for CocoaDialogError.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"setError","longname":"FileSelectResult#setError","kind":"function","memberof":"FileSelectResult","scope":"instance","inherits":"ControlResult#setError","inherited":true,"$longname":"FileSelectResult#setError"},{"comment":"/**\n   * Times out the result.\n   *\n   * @param {String} [message='Timed out!']\n   *   The message to use for CocoaDialogTimeout.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2966,3062],"filename":"ControlResult.js","lineno":127,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001851","name":"ControlResult#timeout","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Times out the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Timed out!'","description":"The message to use for CocoaDialogTimeout.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"timeout","longname":"FileSelectResult#timeout","kind":"function","memberof":"FileSelectResult","scope":"instance","inherits":"ControlResult#timeout","inherited":true,"$longname":"FileSelectResult#timeout"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[261,389],"filename":"FileSelectResult.js","lineno":15,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003232","name":"FileSelectResult","type":"MethodDefinition","paramnames":["control"]},"vars":{"":null}},"inheritdoc":"","name":"FileSelectResult","longname":"FileSelectResult","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"FileSelectResult"}},{"comment":"/**\n * @class InputBox\n *\n * Constructs a InputBox control.\n *\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[231,1558],"filename":"InputBox.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003307","name":"InputBox","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"InputBox\n\nConstructs a InputBox control.","augments":["ThreeButtonControl","Control"],"name":"InputBox","longname":"InputBox","scope":"global","params":[],"$longname":"InputBox","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"InputBox#availableOptions","kind":"function","memberof":"InputBox","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"InputBox#availableOptions"},{"comment":"/**\n   * Sets whether the input on the control will be focused.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[790,867],"filename":"InputBox.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003354","name":"InputBox#blur","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether the input on the control will be focused.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"blur","longname":"InputBox#blur","kind":"function","memberof":"InputBox","scope":"instance","$longname":"InputBox#blur"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"InputBox#close","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"InputBox#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"InputBox#debug","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"InputBox#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"InputBox#float","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"InputBox#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"InputBox#getArguments","kind":"function","memberof":"InputBox","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"InputBox#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {InputResult}\n   */","meta":{"range":[965,1016],"filename":"InputBox.js","lineno":49,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003368","name":"InputBox#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["InputResult"]}}],"name":"getResult","longname":"InputBox#getResult","kind":"function","memberof":"InputBox","scope":"instance","params":[],"overrides":"Control#getResult","$longname":"InputBox#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"InputBox#mapSeries","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"InputBox#mapSeries"},{"comment":"/**\n   * Sets whether the input on the control hides the value of typed characters.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[1249,1325],"filename":"InputBox.js","lineno":61,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003376","name":"InputBox#password","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether the input on the control hides the value of typed characters.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"password","longname":"InputBox#password","kind":"function","memberof":"InputBox","scope":"instance","$longname":"InputBox#password"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"InputBox#setButtons","kind":"function","memberof":"InputBox","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"$longname":"InputBox#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"InputBox#setEmptyText","kind":"function","memberof":"InputBox","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"$longname":"InputBox#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"InputBox#setHeight","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"InputBox#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"InputBox#setIcon","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"InputBox#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"InputBox#setIconFromBundle","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"InputBox#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"InputBox#setIconFromFile","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"InputBox#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"InputBox#setIconSize","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"InputBox#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"InputBox#setIconType","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"InputBox#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"InputBox#setLabel","kind":"function","memberof":"InputBox","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"$longname":"InputBox#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"InputBox#setOption","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"InputBox#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"InputBox#setPosition","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"InputBox#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"InputBox#setSize","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"InputBox#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"InputBox#setTimeout","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"InputBox#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"InputBox#setTitle","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"InputBox#setTitle"},{"comment":"/**\n   * Sets the initial value of the control.\n   *\n   * @param {String} [value='']\n   *   The value to set.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[1486,1555],"filename":"InputBox.js","lineno":73,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003390","name":"InputBox#setValue","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"Sets the initial value of the control.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The value to set.","name":"value"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"setValue","longname":"InputBox#setValue","kind":"function","memberof":"InputBox","scope":"instance","$longname":"InputBox#setValue"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"InputBox#stringOutput","kind":"function","memberof":"InputBox","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"InputBox#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"InputBox#valueRequired","kind":"function","memberof":"InputBox","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"$longname":"InputBox#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[307,371],"filename":"InputBox.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003311","name":"InputBox","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"InputBox","longname":"InputBox","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"InputBox"}},{"comment":"/**\n * @class InputResult\n *\n * Constructs a result object for input based controls.\n *\n * @extends ThreeButtonControlResult\n */","meta":{"range":[208,918],"filename":"InputResult.js","lineno":10,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003417","name":"InputResult","type":"ClassDeclaration","paramnames":["control","numeric"]}},"kind":"class","classdesc":"InputResult\n\nConstructs a result object for input based controls.","augments":["ThreeButtonControlResult"],"name":"InputResult","longname":"InputResult","scope":"global","params":[],"$longname":"InputResult","$members":[{"comment":"/**\n   * Aborts the result.\n   *\n   * @param {String} [message='Aborted!']\n   *   The message to use for CocoaDialogAbort.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[846,936],"filename":"ControlResult.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001611","name":"ControlResult#abort","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Aborts the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Aborted!'","description":"The message to use for CocoaDialogAbort.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"abort","longname":"InputResult#abort","kind":"function","memberof":"InputResult","scope":"instance","inherits":"ControlResult#abort","inherited":true,"$longname":"InputResult#abort"},{"comment":"/**\n     * The current button.\n     *\n     * @type {String|Number|null}\n     */","meta":{"range":[409,427],"filename":"ThreeButtonControlResult.js","lineno":23,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002253","name":"this.button","type":"Literal","value":null,"paramnames":[]}},"description":"The current button.","type":{"names":["String","Number","null"]},"name":"button","longname":"InputResult#button","kind":"member","memberof":"InputResult","scope":"instance","inherits":"ThreeButtonControlResult#button","inherited":true,"$longname":"InputResult#button"},{"comment":"/**\n   * Indicates whether result has been aborted.\n   *\n   * Note: this can be true if timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[1900,1987],"filename":"ControlResult.js","lineno":77,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001774","name":"ControlResult#hasAborted","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has been aborted.\n\nNote: this can be true if timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasAborted","longname":"InputResult#hasAborted","kind":"function","memberof":"InputResult","scope":"instance","params":[],"inherits":"ControlResult#hasAborted","inherited":true,"$longname":"InputResult#hasAborted"},{"comment":"/**\n   * Indicates whether result has an error.\n   *\n   * Note: this can be true if aborted or timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2133,2218],"filename":"ControlResult.js","lineno":88,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001790","name":"ControlResult#hasError","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has an error.\n\nNote: this can be true if aborted or timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasError","longname":"InputResult#hasError","kind":"function","memberof":"InputResult","scope":"instance","params":[],"inherits":"ControlResult#hasError","inherited":true,"$longname":"InputResult#hasError"},{"comment":"/**\n   * Indicates whether result has timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2307,2397],"filename":"ControlResult.js","lineno":97,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001806","name":"ControlResult#hasTimedOut","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasTimedOut","longname":"InputResult#hasTimedOut","kind":"function","memberof":"InputResult","scope":"instance","params":[],"inherits":"ControlResult#hasTimedOut","inherited":true,"$longname":"InputResult#hasTimedOut"},{"comment":"/**\n     * Flag indicating whether result should be numeric.\n     *\n     * @type {Boolean|String}\n     */","meta":{"range":[468,490],"filename":"InputResult.js","lineno":23,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003434","name":"this.numeric","type":"Identifier","value":"numeric","paramnames":[]}},"description":"Flag indicating whether result should be numeric.","type":{"names":["Boolean","String"]},"name":"numeric","longname":"InputResult#numeric","kind":"member","memberof":"InputResult","scope":"instance","$longname":"InputResult#numeric"},{"comment":"/**\n   * Processes the final result.\n   */","meta":{"range":[985,1761],"filename":"ControlResult.js","lineno":47,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001626","name":"ControlResult#process","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Processes the final result.","name":"process","longname":"InputResult#process","kind":"function","memberof":"InputResult","scope":"instance","params":[],"inherits":"ControlResult#process","inherited":true,"overrides":"ThreeButtonControlResult#process","$longname":"InputResult#process"},{"comment":"/**\n   * Sets an error on the result.\n   *\n   * @param {String|CocoaDialogError} [message='Error!']\n   *   The message to use for CocoaDialogError.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2591,2790],"filename":"ControlResult.js","lineno":109,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001822","name":"ControlResult#setError","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Sets an error on the result.","params":[{"type":{"names":["String","CocoaDialogError"]},"optional":true,"defaultvalue":"'Error!'","description":"The message to use for CocoaDialogError.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"setError","longname":"InputResult#setError","kind":"function","memberof":"InputResult","scope":"instance","inherits":"ControlResult#setError","inherited":true,"$longname":"InputResult#setError"},{"comment":"/**\n   * Times out the result.\n   *\n   * @param {String} [message='Timed out!']\n   *   The message to use for CocoaDialogTimeout.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2966,3062],"filename":"ControlResult.js","lineno":127,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001851","name":"ControlResult#timeout","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Times out the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Timed out!'","description":"The message to use for CocoaDialogTimeout.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"timeout","longname":"InputResult#timeout","kind":"function","memberof":"InputResult","scope":"instance","inherits":"ControlResult#timeout","inherited":true,"$longname":"InputResult#timeout"},{"comment":"/**\n     * The value of the control's input.\n     *\n     * @type {String}\n     */","meta":{"range":[583,598],"filename":"InputResult.js","lineno":30,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003440","name":"this.value","type":"Literal","value":"","paramnames":[]}},"description":"The value of the control's input.","type":{"names":["String"]},"name":"value","longname":"InputResult#value","kind":"member","memberof":"InputResult","scope":"instance","$longname":"InputResult#value"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[293,603],"filename":"InputResult.js","lineno":15,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003421","name":"InputResult","type":"MethodDefinition","paramnames":["control","numeric"]},"vars":{"":null}},"inheritdoc":"","name":"InputResult","longname":"InputResult","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"InputResult"}},{"comment":"/**\n * @class MsgBox\n *\n * Constructs a MsgBox control.\n *\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[181,685],"filename":"MsgBox.js","lineno":11,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003516","name":"MsgBox","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"MsgBox\n\nConstructs a MsgBox control.","augments":["ThreeButtonControl","Control"],"name":"MsgBox","longname":"MsgBox","scope":"global","params":[],"$longname":"MsgBox","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"MsgBox#availableOptions","kind":"function","memberof":"MsgBox","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"MsgBox#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"MsgBox#close","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"MsgBox#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"MsgBox#debug","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"MsgBox#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"MsgBox#float","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"MsgBox#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"MsgBox#getArguments","kind":"function","memberof":"MsgBox","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"MsgBox#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {ThreeButtonControlResult}\n   */","meta":{"range":[784,848],"filename":"ThreeButtonControl.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002142","name":"ThreeButtonControl#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["ThreeButtonControlResult"]}}],"name":"getResult","longname":"MsgBox#getResult","kind":"function","memberof":"MsgBox","scope":"instance","params":[],"inherits":"ThreeButtonControl#getResult","inherited":true,"overrides":"Control#getResult","$longname":"MsgBox#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"MsgBox#mapSeries","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"MsgBox#mapSeries"},{"comment":"/**\n   * Sets the alert for the dialog.\n   *\n   * @param {String} message\n   *   The message to set.\n   *\n   * @return {Control.<MsgBox>}\n\\   */","meta":{"range":[614,682],"filename":"MsgBox.js","lineno":38,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003551","name":"MsgBox#setAlert","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Sets the alert for the dialog.","params":[{"type":{"names":["String"]},"description":"The message to set.","name":"message"}],"returns":[{"type":{"names":["Control.<MsgBox>"]},"description":"\\"}],"name":"setAlert","longname":"MsgBox#setAlert","kind":"function","memberof":"MsgBox","scope":"instance","$longname":"MsgBox#setAlert"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"MsgBox#setButtons","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"$longname":"MsgBox#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"MsgBox#setEmptyText","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"$longname":"MsgBox#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"MsgBox#setHeight","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"MsgBox#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"MsgBox#setIcon","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"MsgBox#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"MsgBox#setIconFromBundle","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"MsgBox#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"MsgBox#setIconFromFile","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"MsgBox#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"MsgBox#setIconSize","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"MsgBox#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"MsgBox#setIconType","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"MsgBox#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"MsgBox#setLabel","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"$longname":"MsgBox#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"MsgBox#setOption","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"MsgBox#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"MsgBox#setPosition","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"MsgBox#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"MsgBox#setSize","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"MsgBox#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"MsgBox#setTimeout","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"MsgBox#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"MsgBox#setTitle","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"MsgBox#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"MsgBox#stringOutput","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"MsgBox#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"MsgBox#valueRequired","kind":"function","memberof":"MsgBox","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"$longname":"MsgBox#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[255,317],"filename":"MsgBox.js","lineno":16,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003520","name":"MsgBox","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"MsgBox","longname":"MsgBox","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"MsgBox"}},{"comment":"/**\n * @class Notify\n *\n * Constructs a Notify control.\n *\n * @extends Control\n */","meta":{"range":[128,1062],"filename":"Notify.js","lineno":10,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003576","name":"Notify","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"Notify\n\nConstructs a Notify control.","augments":["Control"],"name":"Notify","longname":"Notify","scope":"global","params":[],"$longname":"Notify","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"Notify#availableOptions","kind":"function","memberof":"Notify","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"Notify#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"Notify#close","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#close","inherited":true,"$longname":"Notify#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"Notify#debug","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#debug","inherited":true,"$longname":"Notify#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"Notify#float","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#float","inherited":true,"$longname":"Notify#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"Notify#getArguments","kind":"function","memberof":"Notify","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"$longname":"Notify#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[5326,5379],"filename":"Control.js","lineno":220,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000630","name":"Control#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["ControlResult"]}}],"name":"getResult","longname":"Notify#getResult","kind":"function","memberof":"Notify","scope":"instance","params":[],"inherits":"Control#getResult","inherited":true,"$longname":"Notify#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"Notify#mapSeries","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#mapSeries","inherited":true,"$longname":"Notify#mapSeries"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"Notify#setHeight","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#setHeight","inherited":true,"$longname":"Notify#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"Notify#setIcon","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#setIcon","inherited":true,"$longname":"Notify#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"Notify#setIconFromBundle","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"$longname":"Notify#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"Notify#setIconFromFile","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"$longname":"Notify#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"Notify#setIconSize","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#setIconSize","inherited":true,"$longname":"Notify#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"Notify#setIconType","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#setIconType","inherited":true,"$longname":"Notify#setIconType"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"Notify#setOption","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#setOption","inherited":true,"$longname":"Notify#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"Notify#setPosition","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#setPosition","inherited":true,"$longname":"Notify#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"Notify#setSize","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#setSize","inherited":true,"$longname":"Notify#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"Notify#setTimeout","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#setTimeout","inherited":true,"$longname":"Notify#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"Notify#setTitle","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#setTitle","inherited":true,"$longname":"Notify#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"Notify#stringOutput","kind":"function","memberof":"Notify","scope":"instance","inherits":"Control#stringOutput","inherited":true,"$longname":"Notify#stringOutput"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   *\n   * @todo Add methods and testing (big task).\n   */","meta":{"range":[243,305],"filename":"Notify.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003580","name":"Notify","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","todo":["Add methods and testing (big task)."],"name":"Notify","longname":"Notify","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"Notify"}},{"comment":"/**\n * @class OkMsgBox\n *\n * Constructs a OkMsgBox control.\n *\n * @extends MsgBox\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[174,745],"filename":"OkMsgBox.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003679","name":"OkMsgBox","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"OkMsgBox\n\nConstructs a OkMsgBox control.","augments":["MsgBox","ThreeButtonControl","Control"],"name":"OkMsgBox","longname":"OkMsgBox","scope":"global","params":[],"$longname":"OkMsgBox","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"OkMsgBox#availableOptions","kind":"function","memberof":"OkMsgBox","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"OkMsgBox#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"OkMsgBox#close","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"OkMsgBox#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"OkMsgBox#debug","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"OkMsgBox#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"OkMsgBox#float","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"OkMsgBox#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"OkMsgBox#getArguments","kind":"function","memberof":"OkMsgBox","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"OkMsgBox#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {ThreeButtonControlResult}\n   */","meta":{"range":[784,848],"filename":"ThreeButtonControl.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002142","name":"ThreeButtonControl#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["ThreeButtonControlResult"]}}],"name":"getResult","longname":"OkMsgBox#getResult","kind":"function","memberof":"OkMsgBox","scope":"instance","params":[],"inherits":"ThreeButtonControl#getResult","inherited":true,"overrides":"Control#getResult","$longname":"OkMsgBox#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"OkMsgBox#mapSeries","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"OkMsgBox#mapSeries"},{"comment":"/**\n   * Sets whether control will show the \"Cancel\" button.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<OkMsgBox>}\n   */","meta":{"range":[664,742],"filename":"OkMsgBox.js","lineno":38,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003714","name":"OkMsgBox#noCancel","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will show the \"Cancel\" button.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<OkMsgBox>"]}}],"name":"noCancel","longname":"OkMsgBox#noCancel","kind":"function","memberof":"OkMsgBox","scope":"instance","$longname":"OkMsgBox#noCancel"},{"comment":"/**\n   * Sets the alert for the dialog.\n   *\n   * @param {String} message\n   *   The message to set.\n   *\n   * @return {Control.<MsgBox>}\n\\   */","meta":{"range":[614,682],"filename":"MsgBox.js","lineno":38,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003551","name":"MsgBox#setAlert","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Sets the alert for the dialog.","params":[{"type":{"names":["String"]},"description":"The message to set.","name":"message"}],"returns":[{"type":{"names":["Control.<MsgBox>"]},"description":"\\"}],"name":"setAlert","longname":"OkMsgBox#setAlert","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"MsgBox#setAlert","inherited":true,"$longname":"OkMsgBox#setAlert"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"OkMsgBox#setButtons","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"overrides":"ThreeButtonControl#setButtons","$longname":"OkMsgBox#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"OkMsgBox#setEmptyText","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"overrides":"ThreeButtonControl#setEmptyText","$longname":"OkMsgBox#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"OkMsgBox#setHeight","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"OkMsgBox#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"OkMsgBox#setIcon","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"OkMsgBox#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"OkMsgBox#setIconFromBundle","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"OkMsgBox#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"OkMsgBox#setIconFromFile","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"OkMsgBox#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"OkMsgBox#setIconSize","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"OkMsgBox#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"OkMsgBox#setIconType","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"OkMsgBox#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"OkMsgBox#setLabel","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"overrides":"ThreeButtonControl#setLabel","$longname":"OkMsgBox#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"OkMsgBox#setOption","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"OkMsgBox#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"OkMsgBox#setPosition","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"OkMsgBox#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"OkMsgBox#setSize","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"OkMsgBox#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"OkMsgBox#setTimeout","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"OkMsgBox#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"OkMsgBox#setTitle","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"OkMsgBox#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"OkMsgBox#stringOutput","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"OkMsgBox#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"OkMsgBox#valueRequired","kind":"function","memberof":"OkMsgBox","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"overrides":"ThreeButtonControl#valueRequired","$longname":"OkMsgBox#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[238,303],"filename":"OkMsgBox.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003683","name":"OkMsgBox","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"OkMsgBox","longname":"OkMsgBox","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"OkMsgBox"}},{"comment":"/**\n * @class ProgressBar\n *\n * Constructs a ProgressBar control.\n *\n * @extends Control\n */","meta":{"range":[347,4716],"filename":"ProgressBar.js","lineno":14,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003765","name":"ProgressBar","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"ProgressBar\n\nConstructs a ProgressBar control.","augments":["Control"],"name":"ProgressBar","longname":"ProgressBar","scope":"global","params":[],"$longname":"ProgressBar","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"ProgressBar#availableOptions","kind":"function","memberof":"ProgressBar","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"ProgressBar#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"ProgressBar#close","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#close","inherited":true,"$longname":"ProgressBar#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"ProgressBar#debug","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#debug","inherited":true,"$longname":"ProgressBar#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"ProgressBar#float","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#float","inherited":true,"$longname":"ProgressBar#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"ProgressBar#getArguments","kind":"function","memberof":"ProgressBar","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"$longname":"ProgressBar#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {ProgressBarResult}\n   */","meta":{"range":[1017,1074],"filename":"ProgressBar.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003833","name":"ProgressBar#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["ProgressBarResult"]}}],"name":"getResult","longname":"ProgressBar#getResult","kind":"function","memberof":"ProgressBar","scope":"instance","params":[],"overrides":"Control#getResult","$longname":"ProgressBar#getResult"},{"comment":"/**\n   * Sets whether the control has indeterminate progress.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ProgressBar>}\n   */","meta":{"range":[1288,1376],"filename":"ProgressBar.js","lineno":64,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003841","name":"ProgressBar#indeterminate","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether the control has indeterminate progress.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ProgressBar>"]}}],"name":"indeterminate","longname":"ProgressBar#indeterminate","kind":"function","memberof":"ProgressBar","scope":"instance","$longname":"ProgressBar#indeterminate"},{"comment":"/**\n     * The items to be processed.\n     *\n     * @type {Array}\n     */","meta":{"range":[562,577],"filename":"ProgressBar.js","lineno":27,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003782","name":"this.items","type":"ArrayExpression","value":"[]","paramnames":[]}},"description":"The items to be processed.","type":{"names":["Array"]},"name":"items","longname":"ProgressBar#items","kind":"member","memberof":"ProgressBar","scope":"instance","$longname":"ProgressBar#items"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"ProgressBar#mapSeries","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#mapSeries","inherited":true,"$longname":"ProgressBar#mapSeries"},{"comment":"/**\n   * Sets the items to process once control has opened.\n   *\n   * @param {Array} items\n   *   An array of items to process.\n   * @param {ProgressBar~itemIterator} iterator\n   *   The iterator that will be called to process each item.\n   *\n   * @return {ProgressBar}\n   */","meta":{"range":[2841,2963],"filename":"ProgressBar.js","lineno":122,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004045","name":"ProgressBar#processItems","type":"MethodDefinition","paramnames":["items","iterator"]},"vars":{"":null}},"description":"Sets the items to process once control has opened.","params":[{"type":{"names":["Array"]},"description":"An array of items to process.","name":"items"},{"type":{"names":["ProgressBar~itemIterator"]},"description":"The iterator that will be called to process each item.","name":"iterator"}],"returns":[{"type":{"names":["ProgressBar"]}}],"name":"processItems","longname":"ProgressBar#processItems","kind":"function","memberof":"ProgressBar","scope":"instance","$longname":"ProgressBar#processItems"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"ProgressBar#setHeight","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#setHeight","inherited":true,"$longname":"ProgressBar#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"ProgressBar#setIcon","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#setIcon","inherited":true,"$longname":"ProgressBar#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"ProgressBar#setIconFromBundle","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"$longname":"ProgressBar#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"ProgressBar#setIconFromFile","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"$longname":"ProgressBar#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"ProgressBar#setIconSize","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#setIconSize","inherited":true,"$longname":"ProgressBar#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"ProgressBar#setIconType","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#setIconType","inherited":true,"$longname":"ProgressBar#setIconType"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"ProgressBar#setOption","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#setOption","inherited":true,"$longname":"ProgressBar#setOption"},{"comment":"/**\n   * Sets the current percentage.\n   *\n   * @param {Number} percent\n   *   The percent to set or the \"current\" value if, total is provided.\n   * @param {Number} [total]\n   *   The total used to determine percentage.\n   *\n   * @return {ProgressBar}\n   */","meta":{"range":[3227,3389],"filename":"ProgressBar.js","lineno":138,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004069","name":"ProgressBar#setPercent","type":"MethodDefinition","paramnames":["percent","total"]},"vars":{"":null}},"description":"Sets the current percentage.","params":[{"type":{"names":["Number"]},"description":"The percent to set or the \"current\" value if, total is provided.","name":"percent"},{"type":{"names":["Number"]},"optional":true,"description":"The total used to determine percentage.","name":"total"}],"returns":[{"type":{"names":["ProgressBar"]}}],"name":"setPercent","longname":"ProgressBar#setPercent","kind":"function","memberof":"ProgressBar","scope":"instance","$longname":"ProgressBar#setPercent"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"ProgressBar#setPosition","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#setPosition","inherited":true,"$longname":"ProgressBar#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"ProgressBar#setSize","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#setSize","inherited":true,"$longname":"ProgressBar#setSize"},{"comment":"/**\n   * Sets the current text and, if open, updating the display.\n   *\n   * @param {String} [text='']\n   *   The text to set.\n   *\n   * @return {ProgressBar}\n   */","meta":{"range":[3560,3634],"filename":"ProgressBar.js","lineno":153,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004100","name":"ProgressBar#setText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the current text and, if open, updating the display.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The text to set.","name":"text"}],"returns":[{"type":{"names":["ProgressBar"]}}],"name":"setText","longname":"ProgressBar#setText","kind":"function","memberof":"ProgressBar","scope":"instance","$longname":"ProgressBar#setText"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"ProgressBar#setTimeout","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#setTimeout","inherited":true,"$longname":"ProgressBar#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"ProgressBar#setTitle","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#setTitle","inherited":true,"$longname":"ProgressBar#setTitle"},{"comment":"/**\n   * Sets whether the control can be stopped.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ProgressBar>}\n   */","meta":{"range":[3836,3916],"filename":"ProgressBar.js","lineno":165,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004117","name":"ProgressBar#stoppable","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether the control can be stopped.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ProgressBar>"]}}],"name":"stoppable","longname":"ProgressBar#stoppable","kind":"function","memberof":"ProgressBar","scope":"instance","$longname":"ProgressBar#stoppable"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"ProgressBar#stringOutput","kind":"function","memberof":"ProgressBar","scope":"instance","inherits":"Control#stringOutput","inherited":true,"$longname":"ProgressBar#stringOutput"},{"comment":"/**\n   * Updates the control's display of the current options.\n   *\n   * @return {ProgressBar}\n   */","meta":{"range":[4023,4331],"filename":"ProgressBar.js","lineno":174,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004131","name":"ProgressBar#update","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Updates the control's display of the current options.","returns":[{"type":{"names":["ProgressBar"]}}],"name":"update","longname":"ProgressBar#update","kind":"function","memberof":"ProgressBar","scope":"instance","params":[],"$longname":"ProgressBar#update"},{"comment":"/**\n   * Writes to the child process of the control.\n   *\n   * @param {String} string\n   *   The string to send.\n   *\n   * @return {ProgressBar}\n   */","meta":{"range":[4488,4713],"filename":"ProgressBar.js","lineno":194,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004181","name":"ProgressBar#write","type":"MethodDefinition","paramnames":["string"]},"vars":{"":null}},"description":"Writes to the child process of the control.","params":[{"type":{"names":["String"]},"description":"The string to send.","name":"string"}],"returns":[{"type":{"names":["ProgressBar"]}}],"name":"write","longname":"ProgressBar#write","kind":"function","memberof":"ProgressBar","scope":"instance","$longname":"ProgressBar#write"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[415,677],"filename":"ProgressBar.js","lineno":19,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003769","name":"ProgressBar","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"ProgressBar","longname":"ProgressBar","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"ProgressBar"}},{"comment":"/**\n * @class ProgressBarResult\n *\n * Constructs a result object for the ProgressBar control.\n *\n * @extends ControlResult\n */","meta":{"range":[184,503],"filename":"ProgressBarResult.js","lineno":10,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004226","name":"ProgressBarResult","type":"ClassDeclaration","paramnames":["control"]}},"kind":"class","classdesc":"ProgressBarResult\n\nConstructs a result object for the ProgressBar control.","augments":["ControlResult"],"name":"ProgressBarResult","longname":"ProgressBarResult","scope":"global","params":[],"$longname":"ProgressBarResult","$members":[{"comment":"/**\n   * Aborts the result.\n   *\n   * @param {String} [message='Aborted!']\n   *   The message to use for CocoaDialogAbort.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[846,936],"filename":"ControlResult.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001611","name":"ControlResult#abort","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Aborts the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Aborted!'","description":"The message to use for CocoaDialogAbort.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"abort","longname":"ProgressBarResult#abort","kind":"function","memberof":"ProgressBarResult","scope":"instance","inherits":"ControlResult#abort","inherited":true,"$longname":"ProgressBarResult#abort"},{"comment":"/**\n   * Indicates whether result has been aborted.\n   *\n   * Note: this can be true if timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[1900,1987],"filename":"ControlResult.js","lineno":77,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001774","name":"ControlResult#hasAborted","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has been aborted.\n\nNote: this can be true if timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasAborted","longname":"ProgressBarResult#hasAborted","kind":"function","memberof":"ProgressBarResult","scope":"instance","params":[],"inherits":"ControlResult#hasAborted","inherited":true,"$longname":"ProgressBarResult#hasAborted"},{"comment":"/**\n   * Indicates whether result has an error.\n   *\n   * Note: this can be true if aborted or timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2133,2218],"filename":"ControlResult.js","lineno":88,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001790","name":"ControlResult#hasError","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has an error.\n\nNote: this can be true if aborted or timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasError","longname":"ProgressBarResult#hasError","kind":"function","memberof":"ProgressBarResult","scope":"instance","params":[],"inherits":"ControlResult#hasError","inherited":true,"$longname":"ProgressBarResult#hasError"},{"comment":"/**\n   * Indicates whether result has timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2307,2397],"filename":"ControlResult.js","lineno":97,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001806","name":"ControlResult#hasTimedOut","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasTimedOut","longname":"ProgressBarResult#hasTimedOut","kind":"function","memberof":"ProgressBarResult","scope":"instance","params":[],"inherits":"ControlResult#hasTimedOut","inherited":true,"$longname":"ProgressBarResult#hasTimedOut"},{"comment":"/**\n   * Processes the final result.\n   */","meta":{"range":[985,1761],"filename":"ControlResult.js","lineno":47,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001626","name":"ControlResult#process","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Processes the final result.","name":"process","longname":"ProgressBarResult#process","kind":"function","memberof":"ProgressBarResult","scope":"instance","params":[],"inherits":"ControlResult#process","inherited":true,"overrides":"ControlResult#process","$longname":"ProgressBarResult#process"},{"comment":"/**\n   * Sets an error on the result.\n   *\n   * @param {String|CocoaDialogError} [message='Error!']\n   *   The message to use for CocoaDialogError.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2591,2790],"filename":"ControlResult.js","lineno":109,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001822","name":"ControlResult#setError","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Sets an error on the result.","params":[{"type":{"names":["String","CocoaDialogError"]},"optional":true,"defaultvalue":"'Error!'","description":"The message to use for CocoaDialogError.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"setError","longname":"ProgressBarResult#setError","kind":"function","memberof":"ProgressBarResult","scope":"instance","inherits":"ControlResult#setError","inherited":true,"$longname":"ProgressBarResult#setError"},{"comment":"/**\n   * Times out the result.\n   *\n   * @param {String} [message='Timed out!']\n   *   The message to use for CocoaDialogTimeout.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2966,3062],"filename":"ControlResult.js","lineno":127,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001851","name":"ControlResult#timeout","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Times out the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Timed out!'","description":"The message to use for CocoaDialogTimeout.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"timeout","longname":"ProgressBarResult#timeout","kind":"function","memberof":"ProgressBarResult","scope":"instance","inherits":"ControlResult#timeout","inherited":true,"$longname":"ProgressBarResult#timeout"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[264,415],"filename":"ProgressBarResult.js","lineno":15,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004230","name":"ProgressBarResult","type":"MethodDefinition","paramnames":["control"]},"vars":{"":null}},"inheritdoc":"","name":"ProgressBarResult","longname":"ProgressBarResult","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"ProgressBarResult"}},{"comment":"/**\n * @class Radio\n *\n * Constructs a Radio control.\n *\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[225,2629],"filename":"Radio.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004278","name":"Radio","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"Radio\n\nConstructs a Radio control.","augments":["ThreeButtonControl","Control"],"name":"Radio","longname":"Radio","scope":"global","params":[],"$longname":"Radio","$members":[{"comment":"/**\n   * Sets whether control allows mixed values.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<Radio>}\n   */","meta":{"range":[556,638],"filename":"Radio.js","lineno":29,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004294","name":"Radio#allowMixed","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control allows mixed values.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<Radio>"]}}],"name":"allowMixed","longname":"Radio#allowMixed","kind":"function","memberof":"Radio","scope":"instance","$longname":"Radio#allowMixed"},{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"Radio#availableOptions","kind":"function","memberof":"Radio","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"Radio#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"Radio#close","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"Radio#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"Radio#debug","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"Radio#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"Radio#float","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"Radio#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"Radio#getArguments","kind":"function","memberof":"Radio","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"Radio#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {RadioResult}\n   */","meta":{"range":[1040,1091],"filename":"Radio.js","lineno":53,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004366","name":"Radio#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["RadioResult"]}}],"name":"getResult","longname":"Radio#getResult","kind":"function","memberof":"Radio","scope":"instance","params":[],"overrides":"Control#getResult","$longname":"Radio#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"Radio#mapSeries","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"Radio#mapSeries"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"Radio#setButtons","kind":"function","memberof":"Radio","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"$longname":"Radio#setButtons"},{"comment":"/**\n   * Sets the number of columns the items should fit into.\n   *\n   * @param {Number} [columns=0]\n   *   The amount of columns to set.\n   *\n   * @return {Control.<Radio>}\n   */","meta":{"range":[1277,1370],"filename":"Radio.js","lineno":65,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004374","name":"Radio#setColumns","type":"MethodDefinition","paramnames":["columns"]},"vars":{"":null}},"description":"Sets the number of columns the items should fit into.","params":[{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"The amount of columns to set.","name":"columns"}],"returns":[{"type":{"names":["Control.<Radio>"]}}],"name":"setColumns","longname":"Radio#setColumns","kind":"function","memberof":"Radio","scope":"instance","$longname":"Radio#setColumns"},{"comment":"/**\n   * Sets which items are disabled when the control opens.\n   *\n   * @param {Array} disabled\n   *   An array of item indices to set as disabled.\n   *\n   * @return {Control.<Radio>}\n   */","meta":{"range":[1567,1648],"filename":"Radio.js","lineno":77,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004391","name":"Radio#setDisabled","type":"MethodDefinition","paramnames":["disabled"]},"vars":{"":null}},"description":"Sets which items are disabled when the control opens.","params":[{"type":{"names":["Array"]},"description":"An array of item indices to set as disabled.","name":"disabled"}],"returns":[{"type":{"names":["Control.<Radio>"]}}],"name":"setDisabled","longname":"Radio#setDisabled","kind":"function","memberof":"Radio","scope":"instance","$longname":"Radio#setDisabled"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"Radio#setEmptyText","kind":"function","memberof":"Radio","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"$longname":"Radio#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"Radio#setHeight","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"Radio#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"Radio#setIcon","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"Radio#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"Radio#setIconFromBundle","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"Radio#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"Radio#setIconFromFile","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"Radio#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"Radio#setIconSize","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"Radio#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"Radio#setIconType","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"Radio#setIconType"},{"comment":"/**\n   * Sets the items for the control.\n   *\n   * @param {Array} items\n   *   An array of item labels.\n   *\n   * @return {Control.<Radio>}\n   */","meta":{"range":[1800,1869],"filename":"Radio.js","lineno":89,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004405","name":"Radio#setItems","type":"MethodDefinition","paramnames":["items"]},"vars":{"":null}},"description":"Sets the items for the control.","params":[{"type":{"names":["Array"]},"description":"An array of item labels.","name":"items"}],"returns":[{"type":{"names":["Control.<Radio>"]}}],"name":"setItems","longname":"Radio#setItems","kind":"function","memberof":"Radio","scope":"instance","$longname":"Radio#setItems"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"Radio#setLabel","kind":"function","memberof":"Radio","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"$longname":"Radio#setLabel"},{"comment":"/**\n   * Sets which items are in a mixed state when the control opens.\n   *\n   * @param {Array} mixed\n   *   An array of item indices to set as mixed.\n   *\n   * @return {Control.<Radio>}\n   */","meta":{"range":[2068,2137],"filename":"Radio.js","lineno":101,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004419","name":"Radio#setMixed","type":"MethodDefinition","paramnames":["mixed"]},"vars":{"":null}},"description":"Sets which items are in a mixed state when the control opens.","params":[{"type":{"names":["Array"]},"description":"An array of item indices to set as mixed.","name":"mixed"}],"returns":[{"type":{"names":["Control.<Radio>"]}}],"name":"setMixed","longname":"Radio#setMixed","kind":"function","memberof":"Radio","scope":"instance","$longname":"Radio#setMixed"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"Radio#setOption","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"Radio#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"Radio#setPosition","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"Radio#setPosition"},{"comment":"/**\n   * Sets the number of rows the items should fit into.\n   *\n   * @param {Number} [rows=0]\n   *   The amount of rows to set.\n   *\n   * @return {Control.<Radio>}\n   */","meta":{"range":[2314,2392],"filename":"Radio.js","lineno":113,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004433","name":"Radio#setRows","type":"MethodDefinition","paramnames":["rows"]},"vars":{"":null}},"description":"Sets the number of rows the items should fit into.","params":[{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"The amount of rows to set.","name":"rows"}],"returns":[{"type":{"names":["Control.<Radio>"]}}],"name":"setRows","longname":"Radio#setRows","kind":"function","memberof":"Radio","scope":"instance","$longname":"Radio#setRows"},{"comment":"/**\n   * Sets which item is selected.\n   *\n   * @param {Number} selected\n   *   The item index to select.\n   *\n   * @return {Control.<Radio>}\n   */","meta":{"range":[2546,2626],"filename":"Radio.js","lineno":125,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004450","name":"Radio#setSelected","type":"MethodDefinition","paramnames":["selected"]},"vars":{"":null}},"description":"Sets which item is selected.","params":[{"type":{"names":["Number"]},"description":"The item index to select.","name":"selected","defaultvalue":0}],"returns":[{"type":{"names":["Control.<Radio>"]}}],"name":"setSelected","longname":"Radio#setSelected","kind":"function","memberof":"Radio","scope":"instance","$longname":"Radio#setSelected"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"Radio#setSize","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"Radio#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"Radio#setTimeout","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"Radio#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"Radio#setTitle","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"Radio#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"Radio#stringOutput","kind":"function","memberof":"Radio","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"Radio#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"Radio#valueRequired","kind":"function","memberof":"Radio","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"$longname":"Radio#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[298,359],"filename":"Radio.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004282","name":"Radio","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"Radio","longname":"Radio","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"Radio"}},{"comment":"/**\n * @class RadioResult\n *\n * Constructs a result object for the Radio control.\n *\n * @extends ThreeButtonControlResult\n */","meta":{"range":[205,848],"filename":"RadioResult.js","lineno":10,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004477","name":"RadioResult","type":"ClassDeclaration","paramnames":["control"]}},"kind":"class","classdesc":"RadioResult\n\nConstructs a result object for the Radio control.","augments":["ThreeButtonControlResult"],"name":"RadioResult","longname":"RadioResult","scope":"global","params":[],"$longname":"RadioResult","$members":[{"comment":"/**\n   * Aborts the result.\n   *\n   * @param {String} [message='Aborted!']\n   *   The message to use for CocoaDialogAbort.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[846,936],"filename":"ControlResult.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001611","name":"ControlResult#abort","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Aborts the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Aborted!'","description":"The message to use for CocoaDialogAbort.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"abort","longname":"RadioResult#abort","kind":"function","memberof":"RadioResult","scope":"instance","inherits":"ControlResult#abort","inherited":true,"$longname":"RadioResult#abort"},{"comment":"/**\n     * The current button.\n     *\n     * @type {String|Number|null}\n     */","meta":{"range":[409,427],"filename":"ThreeButtonControlResult.js","lineno":23,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002253","name":"this.button","type":"Literal","value":null,"paramnames":[]}},"description":"The current button.","type":{"names":["String","Number","null"]},"name":"button","longname":"RadioResult#button","kind":"member","memberof":"RadioResult","scope":"instance","inherits":"ThreeButtonControlResult#button","inherited":true,"$longname":"RadioResult#button"},{"comment":"/**\n   * Indicates whether result has been aborted.\n   *\n   * Note: this can be true if timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[1900,1987],"filename":"ControlResult.js","lineno":77,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001774","name":"ControlResult#hasAborted","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has been aborted.\n\nNote: this can be true if timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasAborted","longname":"RadioResult#hasAborted","kind":"function","memberof":"RadioResult","scope":"instance","params":[],"inherits":"ControlResult#hasAborted","inherited":true,"$longname":"RadioResult#hasAborted"},{"comment":"/**\n   * Indicates whether result has an error.\n   *\n   * Note: this can be true if aborted or timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2133,2218],"filename":"ControlResult.js","lineno":88,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001790","name":"ControlResult#hasError","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has an error.\n\nNote: this can be true if aborted or timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasError","longname":"RadioResult#hasError","kind":"function","memberof":"RadioResult","scope":"instance","params":[],"inherits":"ControlResult#hasError","inherited":true,"$longname":"RadioResult#hasError"},{"comment":"/**\n   * Indicates whether result has timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2307,2397],"filename":"ControlResult.js","lineno":97,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001806","name":"ControlResult#hasTimedOut","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasTimedOut","longname":"RadioResult#hasTimedOut","kind":"function","memberof":"RadioResult","scope":"instance","params":[],"inherits":"ControlResult#hasTimedOut","inherited":true,"$longname":"RadioResult#hasTimedOut"},{"comment":"/**\n   * Processes the final result.\n   */","meta":{"range":[985,1761],"filename":"ControlResult.js","lineno":47,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001626","name":"ControlResult#process","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Processes the final result.","name":"process","longname":"RadioResult#process","kind":"function","memberof":"RadioResult","scope":"instance","params":[],"inherits":"ControlResult#process","inherited":true,"overrides":"ThreeButtonControlResult#process","$longname":"RadioResult#process"},{"comment":"/**\n     * Selected item index.\n     *\n     * @type {Number|String}\n     */","meta":{"range":[418,438],"filename":"RadioResult.js","lineno":23,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004491","name":"this.selected","type":"Literal","value":null,"paramnames":[]}},"description":"Selected item index.","type":{"names":["Number","String"]},"name":"selected","longname":"RadioResult#selected","kind":"member","memberof":"RadioResult","scope":"instance","$longname":"RadioResult#selected"},{"comment":"/**\n   * Sets an error on the result.\n   *\n   * @param {String|CocoaDialogError} [message='Error!']\n   *   The message to use for CocoaDialogError.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2591,2790],"filename":"ControlResult.js","lineno":109,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001822","name":"ControlResult#setError","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Sets an error on the result.","params":[{"type":{"names":["String","CocoaDialogError"]},"optional":true,"defaultvalue":"'Error!'","description":"The message to use for CocoaDialogError.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"setError","longname":"RadioResult#setError","kind":"function","memberof":"RadioResult","scope":"instance","inherits":"ControlResult#setError","inherited":true,"$longname":"RadioResult#setError"},{"comment":"/**\n   * Times out the result.\n   *\n   * @param {String} [message='Timed out!']\n   *   The message to use for CocoaDialogTimeout.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2966,3062],"filename":"ControlResult.js","lineno":127,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001851","name":"ControlResult#timeout","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Times out the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Timed out!'","description":"The message to use for CocoaDialogTimeout.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"timeout","longname":"RadioResult#timeout","kind":"function","memberof":"RadioResult","scope":"instance","inherits":"ControlResult#timeout","inherited":true,"$longname":"RadioResult#timeout"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[290,521],"filename":"RadioResult.js","lineno":15,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004481","name":"RadioResult","type":"MethodDefinition","paramnames":["control"]},"vars":{"":null}},"inheritdoc":"","name":"RadioResult","longname":"RadioResult","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"RadioResult"}},{"comment":"/**\n * @class SecureInputBox\n *\n * Constructs a SecureInputBox control.\n *\n * @extends InputBox\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[192,354],"filename":"SecureInputBox.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004555","name":"SecureInputBox","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"SecureInputBox\n\nConstructs a SecureInputBox control.","augments":["InputBox","ThreeButtonControl","Control"],"name":"SecureInputBox","longname":"SecureInputBox","scope":"global","params":[],"$longname":"SecureInputBox","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"SecureInputBox#availableOptions","kind":"function","memberof":"SecureInputBox","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"$longname":"SecureInputBox#availableOptions"},{"comment":"/**\n   * Sets whether the input on the control will be focused.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[790,867],"filename":"InputBox.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003354","name":"InputBox#blur","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether the input on the control will be focused.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"blur","longname":"SecureInputBox#blur","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"InputBox#blur","inherited":true,"$longname":"SecureInputBox#blur"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"SecureInputBox#close","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"SecureInputBox#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"SecureInputBox#debug","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"SecureInputBox#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"SecureInputBox#float","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"SecureInputBox#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"SecureInputBox#getArguments","kind":"function","memberof":"SecureInputBox","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"SecureInputBox#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {InputResult}\n   */","meta":{"range":[965,1016],"filename":"InputBox.js","lineno":49,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003368","name":"InputBox#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["InputResult"]}}],"name":"getResult","longname":"SecureInputBox#getResult","kind":"function","memberof":"SecureInputBox","scope":"instance","params":[],"inherits":"InputBox#getResult","inherited":true,"overrides":"Control#getResult","$longname":"SecureInputBox#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"SecureInputBox#mapSeries","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"SecureInputBox#mapSeries"},{"comment":"/**\n   * Sets whether the input on the control hides the value of typed characters.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[1249,1325],"filename":"InputBox.js","lineno":61,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003376","name":"InputBox#password","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether the input on the control hides the value of typed characters.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"password","longname":"SecureInputBox#password","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"InputBox#password","inherited":true,"$longname":"SecureInputBox#password"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"SecureInputBox#setButtons","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"overrides":"ThreeButtonControl#setButtons","$longname":"SecureInputBox#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"SecureInputBox#setEmptyText","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"overrides":"ThreeButtonControl#setEmptyText","$longname":"SecureInputBox#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"SecureInputBox#setHeight","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"SecureInputBox#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"SecureInputBox#setIcon","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"SecureInputBox#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"SecureInputBox#setIconFromBundle","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"SecureInputBox#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"SecureInputBox#setIconFromFile","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"SecureInputBox#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"SecureInputBox#setIconSize","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"SecureInputBox#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"SecureInputBox#setIconType","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"SecureInputBox#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"SecureInputBox#setLabel","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"overrides":"ThreeButtonControl#setLabel","$longname":"SecureInputBox#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"SecureInputBox#setOption","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"SecureInputBox#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"SecureInputBox#setPosition","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"SecureInputBox#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"SecureInputBox#setSize","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"SecureInputBox#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"SecureInputBox#setTimeout","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"SecureInputBox#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"SecureInputBox#setTitle","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"SecureInputBox#setTitle"},{"comment":"/**\n   * Sets the initial value of the control.\n   *\n   * @param {String} [value='']\n   *   The value to set.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[1486,1555],"filename":"InputBox.js","lineno":73,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003390","name":"InputBox#setValue","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"Sets the initial value of the control.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The value to set.","name":"value"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"setValue","longname":"SecureInputBox#setValue","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"InputBox#setValue","inherited":true,"$longname":"SecureInputBox#setValue"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"SecureInputBox#stringOutput","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"SecureInputBox#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"SecureInputBox#valueRequired","kind":"function","memberof":"SecureInputBox","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"overrides":"ThreeButtonControl#valueRequired","$longname":"SecureInputBox#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[264,351],"filename":"SecureInputBox.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004559","name":"SecureInputBox","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"SecureInputBox","longname":"SecureInputBox","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"SecureInputBox"}},{"comment":"/**\n * @class SecureStandardInputBox\n *\n * Constructs a SecureStandardInputBox control.\n *\n * @extends StandardInputBox\n * @extends InputBox\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[253,440],"filename":"SecureStandardInputBox.js","lineno":13,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004589","name":"SecureStandardInputBox","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"SecureStandardInputBox\n\nConstructs a SecureStandardInputBox control.","augments":["StandardInputBox","InputBox","ThreeButtonControl","Control"],"name":"SecureStandardInputBox","longname":"SecureStandardInputBox","scope":"global","params":[],"$longname":"SecureStandardInputBox","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"SecureStandardInputBox#availableOptions","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"$longname":"SecureStandardInputBox#availableOptions"},{"comment":"/**\n   * Sets whether the input on the control will be focused.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[790,867],"filename":"InputBox.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003354","name":"InputBox#blur","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether the input on the control will be focused.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"blur","longname":"SecureStandardInputBox#blur","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"InputBox#blur","inherited":true,"overrides":"InputBox#blur","$longname":"SecureStandardInputBox#blur"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"SecureStandardInputBox#close","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"SecureStandardInputBox#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"SecureStandardInputBox#debug","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"SecureStandardInputBox#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"SecureStandardInputBox#float","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"SecureStandardInputBox#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"SecureStandardInputBox#getArguments","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"SecureStandardInputBox#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {InputResult}\n   */","meta":{"range":[965,1016],"filename":"InputBox.js","lineno":49,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003368","name":"InputBox#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["InputResult"]}}],"name":"getResult","longname":"SecureStandardInputBox#getResult","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","params":[],"inherits":"InputBox#getResult","inherited":true,"overrides":"Control#getResult","$longname":"SecureStandardInputBox#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"SecureStandardInputBox#mapSeries","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"SecureStandardInputBox#mapSeries"},{"comment":"/**\n   * Sets whether control will show the \"Cancel\" button.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<OkMsgBox>}\n   */","meta":{"range":[720,798],"filename":"StandardInputBox.js","lineno":39,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004970","name":"StandardInputBox#noCancel","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will show the \"Cancel\" button.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<OkMsgBox>"]}}],"name":"noCancel","longname":"SecureStandardInputBox#noCancel","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"StandardInputBox#noCancel","inherited":true,"$longname":"SecureStandardInputBox#noCancel"},{"comment":"/**\n   * Sets whether the input on the control hides the value of typed characters.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[1249,1325],"filename":"InputBox.js","lineno":61,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003376","name":"InputBox#password","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether the input on the control hides the value of typed characters.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"password","longname":"SecureStandardInputBox#password","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"InputBox#password","inherited":true,"overrides":"InputBox#password","$longname":"SecureStandardInputBox#password"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"SecureStandardInputBox#setButtons","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"overrides":"ThreeButtonControl#setButtons","$longname":"SecureStandardInputBox#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"SecureStandardInputBox#setEmptyText","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"overrides":"ThreeButtonControl#setEmptyText","$longname":"SecureStandardInputBox#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"SecureStandardInputBox#setHeight","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"SecureStandardInputBox#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"SecureStandardInputBox#setIcon","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"SecureStandardInputBox#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"SecureStandardInputBox#setIconFromBundle","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"SecureStandardInputBox#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"SecureStandardInputBox#setIconFromFile","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"SecureStandardInputBox#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"SecureStandardInputBox#setIconSize","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"SecureStandardInputBox#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"SecureStandardInputBox#setIconType","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"SecureStandardInputBox#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"SecureStandardInputBox#setLabel","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"overrides":"ThreeButtonControl#setLabel","$longname":"SecureStandardInputBox#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"SecureStandardInputBox#setOption","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"SecureStandardInputBox#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"SecureStandardInputBox#setPosition","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"SecureStandardInputBox#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"SecureStandardInputBox#setSize","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"SecureStandardInputBox#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"SecureStandardInputBox#setTimeout","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"SecureStandardInputBox#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"SecureStandardInputBox#setTitle","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"SecureStandardInputBox#setTitle"},{"comment":"/**\n   * Sets the initial value of the control.\n   *\n   * @param {String} [value='']\n   *   The value to set.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[1486,1555],"filename":"InputBox.js","lineno":73,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003390","name":"InputBox#setValue","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"Sets the initial value of the control.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The value to set.","name":"value"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"setValue","longname":"SecureStandardInputBox#setValue","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"InputBox#setValue","inherited":true,"overrides":"InputBox#setValue","$longname":"SecureStandardInputBox#setValue"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"SecureStandardInputBox#stringOutput","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"SecureStandardInputBox#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"SecureStandardInputBox#valueRequired","kind":"function","memberof":"SecureStandardInputBox","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"overrides":"ThreeButtonControl#valueRequired","$longname":"SecureStandardInputBox#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[341,437],"filename":"SecureStandardInputBox.js","lineno":18,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004593","name":"SecureStandardInputBox","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"SecureStandardInputBox","longname":"SecureStandardInputBox","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"SecureStandardInputBox"}},{"comment":"/**\n * @class Slider\n *\n * Constructs a Slider control.\n *\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[227,3212],"filename":"Slider.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004629","name":"Slider","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"Slider\n\nConstructs a Slider control.","augments":["ThreeButtonControl","Control"],"name":"Slider","longname":"Slider","scope":"global","params":[],"$longname":"Slider","$members":[{"comment":"/**\n   * Sets whether control will always show the current value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<Slider>}\n   */","meta":{"range":[570,655],"filename":"Slider.js","lineno":29,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004643","name":"Slider#alwaysShowValue","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will always show the current value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<Slider>"]}}],"name":"alwaysShowValue","longname":"Slider#alwaysShowValue","kind":"function","memberof":"Slider","scope":"instance","$longname":"Slider#alwaysShowValue"},{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"Slider#availableOptions","kind":"function","memberof":"Slider","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"Slider#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"Slider#close","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"Slider#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"Slider#debug","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"Slider#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"Slider#float","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"Slider#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"Slider#getArguments","kind":"function","memberof":"Slider","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"Slider#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {InputResult}\n   */","meta":{"range":[1123,1183],"filename":"Slider.js","lineno":55,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004729","name":"Slider#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["InputResult"]}}],"name":"getResult","longname":"Slider#getResult","kind":"function","memberof":"Slider","scope":"instance","params":[],"overrides":"Control#getResult","$longname":"Slider#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"Slider#mapSeries","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"Slider#mapSeries"},{"comment":"/**\n   * Sets whether control will return the value as a float instead of integer.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<Slider>}\n   */","meta":{"range":[1413,1490],"filename":"Slider.js","lineno":67,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004738","name":"Slider#returnFloat","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will return the value as a float instead of integer.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<Slider>"]}}],"name":"returnFloat","longname":"Slider#returnFloat","kind":"function","memberof":"Slider","scope":"instance","$longname":"Slider#returnFloat"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"Slider#setButtons","kind":"function","memberof":"Slider","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"$longname":"Slider#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"Slider#setEmptyText","kind":"function","memberof":"Slider","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"$longname":"Slider#setEmptyText"},{"comment":"/**\n   * Sets the value used to determine if the control result value is \"empty\".\n   *\n   * @param {Number} [value=0]\n   *   The value to set.\n   *\n   * @return {Control.<Slider>}\n   */","meta":{"range":[1682,1760],"filename":"Slider.js","lineno":79,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004752","name":"Slider#setEmptyValue","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"Sets the value used to determine if the control result value is \"empty\".","params":[{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"The value to set.","name":"value"}],"returns":[{"type":{"names":["Control.<Slider>"]}}],"name":"setEmptyValue","longname":"Slider#setEmptyValue","kind":"function","memberof":"Slider","scope":"instance","$longname":"Slider#setEmptyValue"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"Slider#setHeight","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"Slider#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"Slider#setIcon","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"Slider#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"Slider#setIconFromBundle","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"Slider#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"Slider#setIconFromFile","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"Slider#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"Slider#setIconSize","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"Slider#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"Slider#setIconType","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"Slider#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"Slider#setLabel","kind":"function","memberof":"Slider","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"$longname":"Slider#setLabel"},{"comment":"/**\n   * Sets the maximum value in the control.\n   *\n   * @param {Number} [value=0]\n   *   The value to set.\n   *\n   * @return {Control.<Slider>}\n   */","meta":{"range":[1918,1982],"filename":"Slider.js","lineno":91,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004766","name":"Slider#setMax","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"Sets the maximum value in the control.","params":[{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"The value to set.","name":"value"}],"returns":[{"type":{"names":["Control.<Slider>"]}}],"name":"setMax","longname":"Slider#setMax","kind":"function","memberof":"Slider","scope":"instance","$longname":"Slider#setMax"},{"comment":"/**\n   * Sets the minimum value in the control.\n   *\n   * @param {Number} [value=0]\n   *   The value to set.\n   *\n   * @return {Control.<Slider>}\n   */","meta":{"range":[2140,2204],"filename":"Slider.js","lineno":103,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004780","name":"Slider#setMin","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"Sets the minimum value in the control.","params":[{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"The value to set.","name":"value"}],"returns":[{"type":{"names":["Control.<Slider>"]}}],"name":"setMin","longname":"Slider#setMin","kind":"function","memberof":"Slider","scope":"instance","$longname":"Slider#setMin"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"Slider#setOption","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"Slider#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"Slider#setPosition","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"Slider#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"Slider#setSize","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"Slider#setSize"},{"comment":"/**\n   * Sets the label directly above the slider.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<Slider>}\n   */","meta":{"range":[2366,2447],"filename":"Slider.js","lineno":115,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004794","name":"Slider#setSliderLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label directly above the slider.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<Slider>"]}}],"name":"setSliderLabel","longname":"Slider#setSliderLabel","kind":"function","memberof":"Slider","scope":"instance","$longname":"Slider#setSliderLabel"},{"comment":"/**\n   * Sets the amount of ticks the slider should have.\n   *\n   * @param {Number} [count=0]\n   *   The value to set.\n   *\n   * @return {Control.<Slider>}\n   */","meta":{"range":[2615,2683],"filename":"Slider.js","lineno":127,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004808","name":"Slider#setTicks","type":"MethodDefinition","paramnames":["count"]},"vars":{"":null}},"description":"Sets the amount of ticks the slider should have.","params":[{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"The value to set.","name":"count"}],"returns":[{"type":{"names":["Control.<Slider>"]}}],"name":"setTicks","longname":"Slider#setTicks","kind":"function","memberof":"Slider","scope":"instance","$longname":"Slider#setTicks"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"Slider#setTimeout","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"Slider#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"Slider#setTitle","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"Slider#setTitle"},{"comment":"/**\n   * Sets the initial value of the control.\n   *\n   * @param {String} [value='']\n   *   The value to set.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[2844,2913],"filename":"Slider.js","lineno":139,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004822","name":"Slider#setValue","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"Sets the initial value of the control.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The value to set.","name":"value"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"setValue","longname":"Slider#setValue","kind":"function","memberof":"Slider","scope":"instance","$longname":"Slider#setValue"},{"comment":"/**\n   * Sets whether control will snap to the ticks to provide a \"sticky\" value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<Slider>}\n   */","meta":{"range":[3142,3209],"filename":"Slider.js","lineno":151,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004836","name":"Slider#sticky","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will snap to the ticks to provide a \"sticky\" value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<Slider>"]}}],"name":"sticky","longname":"Slider#sticky","kind":"function","memberof":"Slider","scope":"instance","$longname":"Slider#sticky"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"Slider#stringOutput","kind":"function","memberof":"Slider","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"Slider#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"Slider#valueRequired","kind":"function","memberof":"Slider","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"$longname":"Slider#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[301,357],"filename":"Slider.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004633","name":"Slider","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"Slider","longname":"Slider","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"Slider"}},{"comment":"/**\n * @class StandardDropDown\n *\n * Constructs a StandardDropDown control.\n *\n * @extends DropDown\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[196,801],"filename":"StandardDropDown.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004863","name":"StandardDropDown","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"StandardDropDown\n\nConstructs a StandardDropDown control.","augments":["DropDown","ThreeButtonControl","Control"],"name":"StandardDropDown","longname":"StandardDropDown","scope":"global","params":[],"$longname":"StandardDropDown","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"StandardDropDown#availableOptions","kind":"function","memberof":"StandardDropDown","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"StandardDropDown#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"StandardDropDown#close","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"StandardDropDown#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"StandardDropDown#debug","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"StandardDropDown#debug"},{"comment":"/**\n   * Sets whether control will exit when a selection has been made.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<DropDown>}\n   */","meta":{"range":[822,908],"filename":"DropDown.js","lineno":41,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002833","name":"DropDown#exitOnChange","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will exit when a selection has been made.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<DropDown>"]}}],"name":"exitOnChange","longname":"StandardDropDown#exitOnChange","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"DropDown#exitOnChange","inherited":true,"$longname":"StandardDropDown#exitOnChange"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"StandardDropDown#float","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"StandardDropDown#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"StandardDropDown#getArguments","kind":"function","memberof":"StandardDropDown","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"StandardDropDown#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {InputResult}\n   */","meta":{"range":[1006,1063],"filename":"DropDown.js","lineno":50,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002847","name":"DropDown#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["InputResult"]}}],"name":"getResult","longname":"StandardDropDown#getResult","kind":"function","memberof":"StandardDropDown","scope":"instance","params":[],"inherits":"DropDown#getResult","inherited":true,"overrides":"Control#getResult","$longname":"StandardDropDown#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"StandardDropDown#mapSeries","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"StandardDropDown#mapSeries"},{"comment":"/**\n   * Sets whether control will show the \"Cancel\" button.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<OkMsgBox>}\n   */","meta":{"range":[720,798],"filename":"StandardDropDown.js","lineno":39,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004903","name":"StandardDropDown#noCancel","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will show the \"Cancel\" button.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<OkMsgBox>"]}}],"name":"noCancel","longname":"StandardDropDown#noCancel","kind":"function","memberof":"StandardDropDown","scope":"instance","$longname":"StandardDropDown#noCancel"},{"comment":"/**\n   * Sets whether control will be shown as the \"pull down\" style.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<DropDown>}\n   */","meta":{"range":[1282,1360],"filename":"DropDown.js","lineno":62,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002856","name":"DropDown#pullDown","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will be shown as the \"pull down\" style.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<DropDown>"]}}],"name":"pullDown","longname":"StandardDropDown#pullDown","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"DropDown#pullDown","inherited":true,"$longname":"StandardDropDown#pullDown"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"StandardDropDown#setButtons","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"overrides":"ThreeButtonControl#setButtons","$longname":"StandardDropDown#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"StandardDropDown#setEmptyText","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"overrides":"ThreeButtonControl#setEmptyText","$longname":"StandardDropDown#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"StandardDropDown#setHeight","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"StandardDropDown#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"StandardDropDown#setIcon","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"StandardDropDown#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"StandardDropDown#setIconFromBundle","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"StandardDropDown#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"StandardDropDown#setIconFromFile","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"StandardDropDown#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"StandardDropDown#setIconSize","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"StandardDropDown#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"StandardDropDown#setIconType","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"StandardDropDown#setIconType"},{"comment":"/**\n   * Sets the items for the control.\n   *\n   * @param {Array} items\n   *   An array of item labels.\n   *\n   * @return {Control.<DropDown>}\n   */","meta":{"range":[1515,1584],"filename":"DropDown.js","lineno":74,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002870","name":"DropDown#setItems","type":"MethodDefinition","paramnames":["items"]},"vars":{"":null}},"description":"Sets the items for the control.","params":[{"type":{"names":["Array"]},"description":"An array of item labels.","name":"items"}],"returns":[{"type":{"names":["Control.<DropDown>"]}}],"name":"setItems","longname":"StandardDropDown#setItems","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"DropDown#setItems","inherited":true,"$longname":"StandardDropDown#setItems"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"StandardDropDown#setLabel","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"overrides":"ThreeButtonControl#setLabel","$longname":"StandardDropDown#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"StandardDropDown#setOption","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"StandardDropDown#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"StandardDropDown#setPosition","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"StandardDropDown#setPosition"},{"comment":"/**\n   * Sets the selected item for the control.\n   *\n   * @param {Number} index\n   *   The index of the item to display as selected.\n   *\n   * @return {Control.<DropDown>}\n   */","meta":{"range":[1769,1843],"filename":"DropDown.js","lineno":86,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100002884","name":"DropDown#setSelected","type":"MethodDefinition","paramnames":["index"]},"vars":{"":null}},"description":"Sets the selected item for the control.","params":[{"type":{"names":["Number"]},"description":"The index of the item to display as selected.","name":"index","defaultvalue":0}],"returns":[{"type":{"names":["Control.<DropDown>"]}}],"name":"setSelected","longname":"StandardDropDown#setSelected","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"DropDown#setSelected","inherited":true,"$longname":"StandardDropDown#setSelected"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"StandardDropDown#setSize","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"StandardDropDown#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"StandardDropDown#setTimeout","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"StandardDropDown#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"StandardDropDown#setTitle","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"StandardDropDown#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"StandardDropDown#stringOutput","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"StandardDropDown#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"StandardDropDown#valueRequired","kind":"function","memberof":"StandardDropDown","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"overrides":"ThreeButtonControl#valueRequired","$longname":"StandardDropDown#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[270,359],"filename":"StandardDropDown.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004867","name":"StandardDropDown","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"StandardDropDown","longname":"StandardDropDown","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"StandardDropDown"}},{"comment":"/**\n * @class StandardInputBox\n *\n * Constructs a StandardInputBox control.\n *\n * @extends InputBox\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[196,801],"filename":"StandardInputBox.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004930","name":"StandardInputBox","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"StandardInputBox\n\nConstructs a StandardInputBox control.","augments":["InputBox","ThreeButtonControl","Control"],"name":"StandardInputBox","longname":"StandardInputBox","scope":"global","params":[],"$longname":"StandardInputBox","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"StandardInputBox#availableOptions","kind":"function","memberof":"StandardInputBox","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"StandardInputBox#availableOptions"},{"comment":"/**\n   * Sets whether the input on the control will be focused.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[790,867],"filename":"InputBox.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003354","name":"InputBox#blur","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether the input on the control will be focused.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"blur","longname":"StandardInputBox#blur","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"InputBox#blur","inherited":true,"$longname":"StandardInputBox#blur"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"StandardInputBox#close","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"StandardInputBox#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"StandardInputBox#debug","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"StandardInputBox#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"StandardInputBox#float","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"StandardInputBox#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"StandardInputBox#getArguments","kind":"function","memberof":"StandardInputBox","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"StandardInputBox#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {InputResult}\n   */","meta":{"range":[965,1016],"filename":"InputBox.js","lineno":49,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003368","name":"InputBox#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["InputResult"]}}],"name":"getResult","longname":"StandardInputBox#getResult","kind":"function","memberof":"StandardInputBox","scope":"instance","params":[],"inherits":"InputBox#getResult","inherited":true,"overrides":"Control#getResult","$longname":"StandardInputBox#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"StandardInputBox#mapSeries","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"StandardInputBox#mapSeries"},{"comment":"/**\n   * Sets whether control will show the \"Cancel\" button.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<OkMsgBox>}\n   */","meta":{"range":[720,798],"filename":"StandardInputBox.js","lineno":39,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004970","name":"StandardInputBox#noCancel","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will show the \"Cancel\" button.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<OkMsgBox>"]}}],"name":"noCancel","longname":"StandardInputBox#noCancel","kind":"function","memberof":"StandardInputBox","scope":"instance","$longname":"StandardInputBox#noCancel"},{"comment":"/**\n   * Sets whether the input on the control hides the value of typed characters.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[1249,1325],"filename":"InputBox.js","lineno":61,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003376","name":"InputBox#password","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether the input on the control hides the value of typed characters.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"password","longname":"StandardInputBox#password","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"InputBox#password","inherited":true,"$longname":"StandardInputBox#password"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"StandardInputBox#setButtons","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"overrides":"ThreeButtonControl#setButtons","$longname":"StandardInputBox#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"StandardInputBox#setEmptyText","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"overrides":"ThreeButtonControl#setEmptyText","$longname":"StandardInputBox#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"StandardInputBox#setHeight","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"StandardInputBox#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"StandardInputBox#setIcon","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"StandardInputBox#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"StandardInputBox#setIconFromBundle","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"StandardInputBox#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"StandardInputBox#setIconFromFile","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"StandardInputBox#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"StandardInputBox#setIconSize","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"StandardInputBox#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"StandardInputBox#setIconType","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"StandardInputBox#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"StandardInputBox#setLabel","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"overrides":"ThreeButtonControl#setLabel","$longname":"StandardInputBox#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"StandardInputBox#setOption","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"StandardInputBox#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"StandardInputBox#setPosition","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"StandardInputBox#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"StandardInputBox#setSize","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"StandardInputBox#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"StandardInputBox#setTimeout","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"StandardInputBox#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"StandardInputBox#setTitle","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"StandardInputBox#setTitle"},{"comment":"/**\n   * Sets the initial value of the control.\n   *\n   * @param {String} [value='']\n   *   The value to set.\n   *\n   * @return {Control.<InputBox>}\n   */","meta":{"range":[1486,1555],"filename":"InputBox.js","lineno":73,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003390","name":"InputBox#setValue","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"Sets the initial value of the control.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The value to set.","name":"value"}],"returns":[{"type":{"names":["Control.<InputBox>"]}}],"name":"setValue","longname":"StandardInputBox#setValue","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"InputBox#setValue","inherited":true,"$longname":"StandardInputBox#setValue"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"StandardInputBox#stringOutput","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"StandardInputBox#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"StandardInputBox#valueRequired","kind":"function","memberof":"StandardInputBox","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"overrides":"ThreeButtonControl#valueRequired","$longname":"StandardInputBox#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[270,359],"filename":"StandardInputBox.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100004934","name":"StandardInputBox","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"StandardInputBox","longname":"StandardInputBox","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"StandardInputBox"}},{"comment":"/**\n * @class TextBox\n *\n * Constructs a TextBox control.\n *\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[229,2591],"filename":"TextBox.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005003","name":"TextBox","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"TextBox\n\nConstructs a TextBox control.","augments":["ThreeButtonControl","Control"],"name":"TextBox","longname":"TextBox","scope":"global","params":[],"$longname":"TextBox","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"TextBox#availableOptions","kind":"function","memberof":"TextBox","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"TextBox#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"TextBox#close","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"TextBox#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"TextBox#debug","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"TextBox#debug"},{"comment":"/**\n   * Sets whether control is editable.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<TextBox>}\n   */","meta":{"range":[886,998],"filename":"TextBox.js","lineno":44,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005074","name":"TextBox#editable","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control is editable.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<TextBox>"]}}],"name":"editable","longname":"TextBox#editable","kind":"function","memberof":"TextBox","scope":"instance","$longname":"TextBox#editable"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"TextBox#float","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"TextBox#float"},{"comment":"/**\n   * Sets whether control focuses the text box instead of the button.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<TextBox>}\n   */","meta":{"range":[1220,1299],"filename":"TextBox.js","lineno":56,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005094","name":"TextBox#focus","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control focuses the text box instead of the button.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<TextBox>"]}}],"name":"focus","longname":"TextBox#focus","kind":"function","memberof":"TextBox","scope":"instance","$longname":"TextBox#focus"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"TextBox#getArguments","kind":"function","memberof":"TextBox","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"TextBox#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {InputResult}\n   */","meta":{"range":[1397,1448],"filename":"TextBox.js","lineno":65,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005108","name":"TextBox#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["InputResult"]}}],"name":"getResult","longname":"TextBox#getResult","kind":"function","memberof":"TextBox","scope":"instance","params":[],"overrides":"Control#getResult","$longname":"TextBox#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"TextBox#mapSeries","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"TextBox#mapSeries"},{"comment":"/**\n   * Sets whether control scrolls to the bottom of the provided text.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<TextBox>}\n   */","meta":{"range":[1670,1773],"filename":"TextBox.js","lineno":77,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005116","name":"TextBox#scrollToBottom","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control scrolls to the bottom of the provided text.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<TextBox>"]}}],"name":"scrollToBottom","longname":"TextBox#scrollToBottom","kind":"function","memberof":"TextBox","scope":"instance","$longname":"TextBox#scrollToBottom"},{"comment":"/**\n   * Sets whether control selects all the provided text.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<TextBox>}\n   */","meta":{"range":[1982,2061],"filename":"TextBox.js","lineno":89,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005133","name":"TextBox#selectAll","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control selects all the provided text.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<TextBox>"]}}],"name":"selectAll","longname":"TextBox#selectAll","kind":"function","memberof":"TextBox","scope":"instance","$longname":"TextBox#selectAll"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"TextBox#setButtons","kind":"function","memberof":"TextBox","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"$longname":"TextBox#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"TextBox#setEmptyText","kind":"function","memberof":"TextBox","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"$longname":"TextBox#setEmptyText"},{"comment":"/**\n   * Sets the text of the control to the contents of a file.\n   *\n   * Note: if the \"text\" option is provided, this will be ignored.\n   *\n   * @param {String} [filename='']\n   *\n   * @return {Control.<TextBox>}\n   */","meta":{"range":[2288,2398],"filename":"TextBox.js","lineno":102,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005147","name":"TextBox#setFile","type":"MethodDefinition","paramnames":["filename"]},"vars":{"":null}},"description":"Sets the text of the control to the contents of a file.\n\nNote: if the \"text\" option is provided, this will be ignored.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"filename"}],"returns":[{"type":{"names":["Control.<TextBox>"]}}],"name":"setFile","longname":"TextBox#setFile","kind":"function","memberof":"TextBox","scope":"instance","$longname":"TextBox#setFile"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"TextBox#setHeight","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"TextBox#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"TextBox#setIcon","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"TextBox#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"TextBox#setIconFromBundle","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"TextBox#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"TextBox#setIconFromFile","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"TextBox#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"TextBox#setIconSize","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"TextBox#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"TextBox#setIconType","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"TextBox#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"TextBox#setLabel","kind":"function","memberof":"TextBox","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"$longname":"TextBox#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"TextBox#setOption","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"TextBox#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"TextBox#setPosition","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"TextBox#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"TextBox#setSize","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"TextBox#setSize"},{"comment":"/**\n   * Sets the text of the control.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<TextBox>}\n   */","meta":{"range":[2523,2588],"filename":"TextBox.js","lineno":113,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005169","name":"TextBox#setText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text of the control.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<TextBox>"]}}],"name":"setText","longname":"TextBox#setText","kind":"function","memberof":"TextBox","scope":"instance","$longname":"TextBox#setText"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"TextBox#setTimeout","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"TextBox#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"TextBox#setTitle","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"TextBox#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"TextBox#stringOutput","kind":"function","memberof":"TextBox","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"TextBox#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"TextBox#valueRequired","kind":"function","memberof":"TextBox","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"$longname":"TextBox#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[304,367],"filename":"TextBox.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005007","name":"TextBox","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"TextBox","longname":"TextBox","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"TextBox"}},{"comment":"/**\n * @class ThreeButtonControl\n *\n * The base class for all three button controls.\n *\n * @extends Control\n */","meta":{"range":[223,1999],"filename":"ThreeButtonControl.js","lineno":11,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002070","name":"ThreeButtonControl","type":"ClassDeclaration","paramnames":["name","options"]}},"kind":"class","classdesc":"ThreeButtonControl\n\nThe base class for all three button controls.","augments":["Control"],"name":"ThreeButtonControl","longname":"ThreeButtonControl","scope":"global","params":[],"$longname":"ThreeButtonControl","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"ThreeButtonControl#availableOptions","kind":"function","memberof":"ThreeButtonControl","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"ThreeButtonControl#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"ThreeButtonControl#close","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#close","inherited":true,"$longname":"ThreeButtonControl#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"ThreeButtonControl#debug","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#debug","inherited":true,"$longname":"ThreeButtonControl#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"ThreeButtonControl#float","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#float","inherited":true,"$longname":"ThreeButtonControl#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"ThreeButtonControl#getArguments","kind":"function","memberof":"ThreeButtonControl","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"$longname":"ThreeButtonControl#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {ThreeButtonControlResult}\n   */","meta":{"range":[784,848],"filename":"ThreeButtonControl.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002142","name":"ThreeButtonControl#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["ThreeButtonControlResult"]}}],"name":"getResult","longname":"ThreeButtonControl#getResult","kind":"function","memberof":"ThreeButtonControl","scope":"instance","params":[],"overrides":"Control#getResult","$longname":"ThreeButtonControl#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"ThreeButtonControl#mapSeries","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#mapSeries","inherited":true,"$longname":"ThreeButtonControl#mapSeries"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"ThreeButtonControl#setButtons","kind":"function","memberof":"ThreeButtonControl","scope":"instance","$longname":"ThreeButtonControl#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"ThreeButtonControl#setEmptyText","kind":"function","memberof":"ThreeButtonControl","scope":"instance","$longname":"ThreeButtonControl#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"ThreeButtonControl#setHeight","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#setHeight","inherited":true,"$longname":"ThreeButtonControl#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"ThreeButtonControl#setIcon","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#setIcon","inherited":true,"$longname":"ThreeButtonControl#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"ThreeButtonControl#setIconFromBundle","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"$longname":"ThreeButtonControl#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"ThreeButtonControl#setIconFromFile","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"$longname":"ThreeButtonControl#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"ThreeButtonControl#setIconSize","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#setIconSize","inherited":true,"$longname":"ThreeButtonControl#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"ThreeButtonControl#setIconType","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#setIconType","inherited":true,"$longname":"ThreeButtonControl#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"ThreeButtonControl#setLabel","kind":"function","memberof":"ThreeButtonControl","scope":"instance","$longname":"ThreeButtonControl#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"ThreeButtonControl#setOption","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#setOption","inherited":true,"$longname":"ThreeButtonControl#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"ThreeButtonControl#setPosition","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#setPosition","inherited":true,"$longname":"ThreeButtonControl#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"ThreeButtonControl#setSize","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#setSize","inherited":true,"$longname":"ThreeButtonControl#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"ThreeButtonControl#setTimeout","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#setTimeout","inherited":true,"$longname":"ThreeButtonControl#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"ThreeButtonControl#setTitle","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#setTitle","inherited":true,"$longname":"ThreeButtonControl#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"ThreeButtonControl#stringOutput","kind":"function","memberof":"ThreeButtonControl","scope":"instance","inherits":"Control#stringOutput","inherited":true,"$longname":"ThreeButtonControl#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"ThreeButtonControl#valueRequired","kind":"function","memberof":"ThreeButtonControl","scope":"instance","$longname":"ThreeButtonControl#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[298,362],"filename":"ThreeButtonControl.js","lineno":16,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002074","name":"ThreeButtonControl","type":"MethodDefinition","paramnames":["name","options"]},"vars":{"":null}},"inheritdoc":"","name":"ThreeButtonControl","longname":"ThreeButtonControl","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"ThreeButtonControl"}},{"comment":"/**\n * @class ThreeButtonControlResult\n *\n * Constructs a result object for a three button based control.\n *\n * @extends ControlResult\n */","meta":{"range":[190,1790],"filename":"ThreeButtonControlResult.js","lineno":10,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002239","name":"ThreeButtonControlResult","type":"ClassDeclaration","paramnames":["control"]}},"kind":"class","classdesc":"ThreeButtonControlResult\n\nConstructs a result object for a three button based control.","augments":["ControlResult"],"name":"ThreeButtonControlResult","longname":"ThreeButtonControlResult","scope":"global","params":[],"$longname":"ThreeButtonControlResult","$members":[{"comment":"/**\n   * Aborts the result.\n   *\n   * @param {String} [message='Aborted!']\n   *   The message to use for CocoaDialogAbort.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[846,936],"filename":"ControlResult.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001611","name":"ControlResult#abort","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Aborts the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Aborted!'","description":"The message to use for CocoaDialogAbort.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"abort","longname":"ThreeButtonControlResult#abort","kind":"function","memberof":"ThreeButtonControlResult","scope":"instance","inherits":"ControlResult#abort","inherited":true,"$longname":"ThreeButtonControlResult#abort"},{"comment":"/**\n     * The current button.\n     *\n     * @type {String|Number|null}\n     */","meta":{"range":[409,427],"filename":"ThreeButtonControlResult.js","lineno":23,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002253","name":"this.button","type":"Literal","value":null,"paramnames":[]}},"description":"The current button.","type":{"names":["String","Number","null"]},"name":"button","longname":"ThreeButtonControlResult#button","kind":"member","memberof":"ThreeButtonControlResult","scope":"instance","$longname":"ThreeButtonControlResult#button"},{"comment":"/**\n   * Indicates whether result has been aborted.\n   *\n   * Note: this can be true if timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[1900,1987],"filename":"ControlResult.js","lineno":77,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001774","name":"ControlResult#hasAborted","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has been aborted.\n\nNote: this can be true if timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasAborted","longname":"ThreeButtonControlResult#hasAborted","kind":"function","memberof":"ThreeButtonControlResult","scope":"instance","params":[],"inherits":"ControlResult#hasAborted","inherited":true,"$longname":"ThreeButtonControlResult#hasAborted"},{"comment":"/**\n   * Indicates whether result has an error.\n   *\n   * Note: this can be true if aborted or timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2133,2218],"filename":"ControlResult.js","lineno":88,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001790","name":"ControlResult#hasError","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has an error.\n\nNote: this can be true if aborted or timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasError","longname":"ThreeButtonControlResult#hasError","kind":"function","memberof":"ThreeButtonControlResult","scope":"instance","params":[],"inherits":"ControlResult#hasError","inherited":true,"$longname":"ThreeButtonControlResult#hasError"},{"comment":"/**\n   * Indicates whether result has timed out.\n   *\n   * @return {Boolean}\n   */","meta":{"range":[2307,2397],"filename":"ControlResult.js","lineno":97,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001806","name":"ControlResult#hasTimedOut","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Indicates whether result has timed out.","returns":[{"type":{"names":["Boolean"]}}],"name":"hasTimedOut","longname":"ThreeButtonControlResult#hasTimedOut","kind":"function","memberof":"ThreeButtonControlResult","scope":"instance","params":[],"inherits":"ControlResult#hasTimedOut","inherited":true,"$longname":"ThreeButtonControlResult#hasTimedOut"},{"comment":"/**\n   * Processes the final result.\n   */","meta":{"range":[985,1761],"filename":"ControlResult.js","lineno":47,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001626","name":"ControlResult#process","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Processes the final result.","name":"process","longname":"ThreeButtonControlResult#process","kind":"function","memberof":"ThreeButtonControlResult","scope":"instance","params":[],"inherits":"ControlResult#process","inherited":true,"overrides":"ControlResult#process","$longname":"ThreeButtonControlResult#process"},{"comment":"/**\n   * Sets an error on the result.\n   *\n   * @param {String|CocoaDialogError} [message='Error!']\n   *   The message to use for CocoaDialogError.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2591,2790],"filename":"ControlResult.js","lineno":109,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001822","name":"ControlResult#setError","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Sets an error on the result.","params":[{"type":{"names":["String","CocoaDialogError"]},"optional":true,"defaultvalue":"'Error!'","description":"The message to use for CocoaDialogError.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"setError","longname":"ThreeButtonControlResult#setError","kind":"function","memberof":"ThreeButtonControlResult","scope":"instance","inherits":"ControlResult#setError","inherited":true,"$longname":"ThreeButtonControlResult#setError"},{"comment":"/**\n   * Times out the result.\n   *\n   * @param {String} [message='Timed out!']\n   *   The message to use for CocoaDialogTimeout.\n   *\n   * @return {ControlResult}\n   */","meta":{"range":[2966,3062],"filename":"ControlResult.js","lineno":127,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001851","name":"ControlResult#timeout","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Times out the result.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Timed out!'","description":"The message to use for CocoaDialogTimeout.","name":"message"}],"returns":[{"type":{"names":["ControlResult"]}}],"name":"timeout","longname":"ThreeButtonControlResult#timeout","kind":"function","memberof":"ThreeButtonControlResult","scope":"instance","inherits":"ControlResult#timeout","inherited":true,"$longname":"ThreeButtonControlResult#timeout"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[277,529],"filename":"ThreeButtonControlResult.js","lineno":15,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002243","name":"ThreeButtonControlResult","type":"MethodDefinition","paramnames":["control"]},"vars":{"":null}},"inheritdoc":"","name":"ThreeButtonControlResult","longname":"ThreeButtonControlResult","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"ThreeButtonControlResult"}},{"comment":"/**\n * @class YesNoMsgBox\n *\n * Constructs a YesNoMsgBox control.\n *\n * @extends MsgBox\n * @extends ThreeButtonControl\n * @extends Control\n */","meta":{"range":[180,773],"filename":"YesNoMsgBox.js","lineno":12,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005196","name":"YesNoMsgBox","type":"ClassDeclaration","paramnames":["options"]}},"kind":"class","classdesc":"YesNoMsgBox\n\nConstructs a YesNoMsgBox control.","augments":["MsgBox","ThreeButtonControl","Control"],"name":"YesNoMsgBox","longname":"YesNoMsgBox","scope":"global","params":[],"$longname":"YesNoMsgBox","$members":[{"comment":"/**\n   * A list of all available options.\n   *\n   * @return {Object}\n   */","meta":{"range":[1989,2508],"filename":"Control.js","lineno":80,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000309","name":"Control#availableOptions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all available options.","returns":[{"type":{"names":["Object"]}}],"name":"availableOptions","longname":"YesNoMsgBox#availableOptions","kind":"function","memberof":"YesNoMsgBox","scope":"instance","params":[],"inherits":"Control#availableOptions","inherited":true,"overrides":"Control#availableOptions","$longname":"YesNoMsgBox#availableOptions"},{"comment":"/**\n   * Close the control dialog by terminating the child process.\n   *\n   * @param {Boolean} [abort=false]\n   *   Flag indicating whether or not the process was aborted.\n   */","meta":{"range":[2692,2852],"filename":"Control.js","lineno":117,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000363","name":"Control#close","type":"MethodDefinition","paramnames":["abort"]},"vars":{"":null}},"description":"Close the control dialog by terminating the child process.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Flag indicating whether or not the process was aborted.","name":"abort"}],"name":"close","longname":"YesNoMsgBox#close","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#close","inherited":true,"overrides":"Control#close","$longname":"YesNoMsgBox#close"},{"comment":"/**\n   * Enables control debugging.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3026,3098],"filename":"Control.js","lineno":135,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000393","name":"Control#debug","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Enables control debugging.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"debug","longname":"YesNoMsgBox#debug","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#debug","inherited":true,"overrides":"Control#debug","$longname":"YesNoMsgBox#debug"},{"comment":"/**\n   * Makes the control float above all windows.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[3288,3363],"filename":"Control.js","lineno":147,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000407","name":"Control#float","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Makes the control float above all windows.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"float","longname":"YesNoMsgBox#float","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#float","inherited":true,"overrides":"Control#float","$longname":"YesNoMsgBox#float"},{"comment":"/**\n   * Retrieves the arguments to use for instantiating the cococaDialog binary.\n   *\n   * @return {Array}\n   *   An array of arguments.\n   */","meta":{"range":[3514,5226],"filename":"Control.js","lineno":157,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000422","name":"Control#getArguments","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Retrieves the arguments to use for instantiating the cococaDialog binary.","returns":[{"type":{"names":["Array"]},"description":"An array of arguments."}],"name":"getArguments","longname":"YesNoMsgBox#getArguments","kind":"function","memberof":"YesNoMsgBox","scope":"instance","params":[],"inherits":"Control#getArguments","inherited":true,"overrides":"Control#getArguments","$longname":"YesNoMsgBox#getArguments"},{"comment":"/**\n   * Creates a new result object for the control.\n   *\n   * @return {ThreeButtonControlResult}\n   */","meta":{"range":[784,848],"filename":"ThreeButtonControl.js","lineno":40,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002142","name":"ThreeButtonControl#getResult","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Creates a new result object for the control.","returns":[{"type":{"names":["ThreeButtonControlResult"]}}],"name":"getResult","longname":"YesNoMsgBox#getResult","kind":"function","memberof":"YesNoMsgBox","scope":"instance","params":[],"inherits":"ThreeButtonControl#getResult","inherited":true,"overrides":"Control#getResult","$longname":"YesNoMsgBox#getResult"},{"comment":"/**\n   * Iterates over an array and ensures each Promise has finished.\n   *\n   * @param {Array} array\n   *   The array.\n   * @param {Function} iterator\n   *   The iterator function.\n   * @param {*} [thisArg]\n   *   The \"this\" context.\n   *\n   * @return {Promise}\n   */","meta":{"range":[5654,6060],"filename":"Control.js","lineno":236,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100000638","name":"Control#mapSeries","type":"MethodDefinition","paramnames":["array","iterator","thisArg"]},"vars":{"":null}},"description":"Iterates over an array and ensures each Promise has finished.","params":[{"type":{"names":["Array"]},"description":"The array.","name":"array"},{"type":{"names":["function"]},"description":"The iterator function.","name":"iterator"},{"type":{"names":["*"]},"optional":true,"description":"The \"this\" context.","name":"thisArg"}],"returns":[{"type":{"names":["Promise"]}}],"name":"mapSeries","longname":"YesNoMsgBox#mapSeries","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#mapSeries","inherited":true,"overrides":"Control#mapSeries","$longname":"YesNoMsgBox#mapSeries"},{"comment":"/**\n   * Sets whether control will show the \"Cancel\" button.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<OkMsgBox>}\n   */","meta":{"range":[692,770],"filename":"YesNoMsgBox.js","lineno":39,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005236","name":"YesNoMsgBox#noCancel","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control will show the \"Cancel\" button.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<OkMsgBox>"]}}],"name":"noCancel","longname":"YesNoMsgBox#noCancel","kind":"function","memberof":"YesNoMsgBox","scope":"instance","$longname":"YesNoMsgBox#noCancel"},{"comment":"/**\n   * Sets the alert for the dialog.\n   *\n   * @param {String} message\n   *   The message to set.\n   *\n   * @return {Control.<MsgBox>}\n\\   */","meta":{"range":[614,682],"filename":"MsgBox.js","lineno":38,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100003551","name":"MsgBox#setAlert","type":"MethodDefinition","paramnames":["message"]},"vars":{"":null}},"description":"Sets the alert for the dialog.","params":[{"type":{"names":["String"]},"description":"The message to set.","name":"message"}],"returns":[{"type":{"names":["Control.<MsgBox>"]},"description":"\\"}],"name":"setAlert","longname":"YesNoMsgBox#setAlert","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"MsgBox#setAlert","inherited":true,"$longname":"YesNoMsgBox#setAlert"},{"comment":"/**\n   * Sets the buttons for the control.\n   *\n   * @param {...String} buttons\n   *   The button labels.\n   *\n   * @return {ThreeButtonControl}\n   **/","meta":{"range":[1006,1232],"filename":"ThreeButtonControl.js","lineno":52,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002150","name":"ThreeButtonControl#setButtons","type":"MethodDefinition","paramnames":["buttons"]},"vars":{"":null}},"description":"Sets the buttons for the control.","params":[{"type":{"names":["String"]},"variable":true,"description":"The button labels.","name":"buttons"}],"returns":[{"type":{"names":["ThreeButtonControl"]}}],"name":"setButtons","longname":"YesNoMsgBox#setButtons","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"ThreeButtonControl#setButtons","inherited":true,"overrides":"ThreeButtonControl#setButtons","$longname":"YesNoMsgBox#setButtons"},{"comment":"/**\n   * Sets the text to display if a control requires a value.\n   *\n   * @param {String} [text='']\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1394,1469],"filename":"ThreeButtonControl.js","lineno":69,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002184","name":"ThreeButtonControl#setEmptyText","type":"MethodDefinition","paramnames":["text"]},"vars":{"":null}},"description":"Sets the text to display if a control requires a value.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","name":"text"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setEmptyText","longname":"YesNoMsgBox#setEmptyText","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"ThreeButtonControl#setEmptyText","inherited":true,"overrides":"ThreeButtonControl#setEmptyText","$longname":"YesNoMsgBox#setEmptyText"},{"comment":"/**\n   * Sets the control height.\n   *\n   * @param {Number} height\n   *   The height to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[8248,8316],"filename":"Control.js","lineno":347,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001013","name":"Control#setHeight","type":"MethodDefinition","paramnames":["height"]},"vars":{"":null}},"description":"Sets the control height.","params":[{"type":{"names":["Number"]},"description":"The height to set.","name":"height"}],"returns":[{"type":{"names":["Control"]}}],"name":"setHeight","longname":"YesNoMsgBox#setHeight","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#setHeight","inherited":true,"overrides":"Control#setHeight","$longname":"YesNoMsgBox#setHeight"},{"comment":"/**\n   * Sets an icon by name.\n   *\n   * @param {String} name\n   *   The name of the icon to set.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[8644,8772],"filename":"Control.js","lineno":362,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001025","name":"Control#setIcon","type":"MethodDefinition","paramnames":["name","size"]},"vars":{"":null}},"description":"Sets an icon by name.","params":[{"type":{"names":["String"]},"description":"The name of the icon to set.","name":"name"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIcon","longname":"YesNoMsgBox#setIcon","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#setIcon","inherited":true,"overrides":"Control#setIcon","$longname":"YesNoMsgBox#setIcon"},{"comment":"/**\n   * Sets the icon from a bundle.\n   *\n   * @param {String} bundle\n   *   The application bundle name to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9116,9264],"filename":"Control.js","lineno":381,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001049","name":"Control#setIconFromBundle","type":"MethodDefinition","paramnames":["bundle","size"]},"vars":{"":null}},"description":"Sets the icon from a bundle.","params":[{"type":{"names":["String"]},"description":"The application bundle name to use.","name":"bundle"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromBundle","longname":"YesNoMsgBox#setIconFromBundle","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#setIconFromBundle","inherited":true,"overrides":"Control#setIconFromBundle","$longname":"YesNoMsgBox#setIconFromBundle"},{"comment":"/**\n   * Sets the icon from a file.\n   *\n   * @param {String} file\n   *   The icon file to use.\n   * @param {Number|{width: Number, height: Number}} [size]\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9590,9730],"filename":"Control.js","lineno":400,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001073","name":"Control#setIconFromFile","type":"MethodDefinition","paramnames":["file","size"]},"vars":{"":null}},"description":"Sets the icon from a file.","params":[{"type":{"names":["String"]},"description":"The icon file to use.","name":"file"},{"type":{"names":["Number","Object"]},"optional":true,"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconFromFile","longname":"YesNoMsgBox#setIconFromFile","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#setIconFromFile","inherited":true,"overrides":"Control#setIconFromFile","$longname":"YesNoMsgBox#setIconFromFile"},{"comment":"/**\n   * Sets the icon size.\n   *\n   * @param {Number|{width: Number, height: Number}} size\n   *   The size of the icon. This can be an arbitrary number or an object\n   *   containing specific width and height properties.\n   *\n   * @return {Control}\n   */","meta":{"range":[9992,10312],"filename":"Control.js","lineno":417,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001097","name":"Control#setIconSize","type":"MethodDefinition","paramnames":["size"]},"vars":{"":null}},"description":"Sets the icon size.","params":[{"type":{"names":["Number","Object"]},"description":"The size of the icon. This can be an arbitrary number or an object\n  containing specific width and height properties.","name":"size"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconSize","longname":"YesNoMsgBox#setIconSize","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#setIconSize","inherited":true,"overrides":"Control#setIconSize","$longname":"YesNoMsgBox#setIconSize"},{"comment":"/**\n   * Sets the icon type.\n   *\n   * @param {String} type\n   *   The file type of the icon being loaded. By default, cocoaDialog sets\n   *   this to \"icns\", the macOS icon file type.\n   *\n   * @return {Control}\n   */","meta":{"range":[10537,10605],"filename":"Control.js","lineno":438,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001155","name":"Control#setIconType","type":"MethodDefinition","paramnames":["type"]},"vars":{"":null}},"description":"Sets the icon type.","params":[{"type":{"names":["String"]},"description":"The file type of the icon being loaded. By default, cocoaDialog sets\n  this to \"icns\", the macOS icon file type.","name":"type"}],"returns":[{"type":{"names":["Control"]}}],"name":"setIconType","longname":"YesNoMsgBox#setIconType","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#setIconType","inherited":true,"overrides":"Control#setIconType","$longname":"YesNoMsgBox#setIconType"},{"comment":"/**\n   * Sets the label for the dialog.\n   *\n   * @param {String} [label='']\n   *   The label to set.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1632,1701],"filename":"ThreeButtonControl.js","lineno":81,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002198","name":"ThreeButtonControl#setLabel","type":"MethodDefinition","paramnames":["label"]},"vars":{"":null}},"description":"Sets the label for the dialog.","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"''","description":"The label to set.","name":"label"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"setLabel","longname":"YesNoMsgBox#setLabel","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"ThreeButtonControl#setLabel","inherited":true,"overrides":"ThreeButtonControl#setLabel","$longname":"YesNoMsgBox#setLabel"},{"comment":"/**\n   * Sets an option for the control.\n   *\n   * @param {String|Object} name\n   *   The name of the option to set or an object containing key/value pairs\n   *   of options to set.\n   * @param {*} [value]\n   *   The value of the option to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[10890,12147],"filename":"Control.js","lineno":453,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001167","name":"Control#setOption","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets an option for the control.","params":[{"type":{"names":["String","Object"]},"description":"The name of the option to set or an object containing key/value pairs\n  of options to set.","name":"name"},{"type":{"names":["*"]},"optional":true,"description":"The value of the option to set.","name":"value"}],"returns":[{"type":{"names":["Control"]}}],"name":"setOption","longname":"YesNoMsgBox#setOption","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#setOption","inherited":true,"overrides":"Control#setOption","$longname":"YesNoMsgBox#setOption"},{"comment":"/**\n   * Sets the position of the control.\n   *\n   * @param {Number|'left'|'center'|'right'} x\n   *   The horizontal position.\n   * @param {Number|'top'|'center'|'bottom'} y\n   *   The vertical position.\n   *\n   * @return {Control}\n   */","meta":{"range":[12391,12481],"filename":"Control.js","lineno":514,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001351","name":"Control#setPosition","type":"MethodDefinition","paramnames":["x","y"]},"vars":{"":null}},"description":"Sets the position of the control.","params":[{"type":{"names":["Number","'left'","'center'","'right'"]},"description":"The horizontal position.","name":"x","defaultvalue":0},{"type":{"names":["Number","'top'","'center'","'bottom'"]},"description":"The vertical position.","name":"y","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setPosition","longname":"YesNoMsgBox#setPosition","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#setPosition","inherited":true,"overrides":"Control#setPosition","$longname":"YesNoMsgBox#setPosition"},{"comment":"/**\n   * Sets the size of the control.\n   *\n   * @param {Number} width\n   *   The width.\n   * @param {Number} height\n   *   The height.\n   *\n   * @return {Control}\n   */","meta":{"range":[12658,12745],"filename":"Control.js","lineno":529,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001373","name":"Control#setSize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Sets the size of the control.","params":[{"type":{"names":["Number"]},"description":"The width.","name":"width","defaultvalue":0},{"type":{"names":["Number"]},"description":"The height.","name":"height","defaultvalue":0}],"returns":[{"type":{"names":["Control"]}}],"name":"setSize","longname":"YesNoMsgBox#setSize","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#setSize","inherited":true,"overrides":"Control#setSize","$longname":"YesNoMsgBox#setSize"},{"comment":"/**\n   * Sets a timeout for the control.\n   *\n   * @param {Number} seconds\n   *   The number of seconds to wait before the control times out.\n   * @param {String} [format='Time remaining: %r...']\n   *   The format for the timeout label. By default, cocoaDialog sets this\n   *   to \"Time remaining: %r...\" internally. If overridden, you can specify\n   *   the following placeholders to be replaced with the actual value:\n   *   - %s: seconds\n   *   - %m: minutes\n   *   - %h: hours\n   *   - %d: days\n   *   - %r: relative\n   *\n   * @return {Control}\n   */","meta":{"range":[13500,13661],"filename":"Control.js","lineno":562,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001405","name":"Control#setTimeout","type":"MethodDefinition","paramnames":["seconds","format"]},"vars":{"":null}},"description":"Sets a timeout for the control.","params":[{"type":{"names":["Number"]},"description":"The number of seconds to wait before the control times out.","name":"seconds"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'Time remaining: %r...'","description":"The format for the timeout label. By default, cocoaDialog sets this\n  to \"Time remaining: %r...\" internally. If overridden, you can specify\n  the following placeholders to be replaced with the actual value:\n  - %s: seconds\n  - %m: minutes\n  - %h: hours\n  - %d: days\n  - %r: relative","name":"format"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTimeout","longname":"YesNoMsgBox#setTimeout","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#setTimeout","inherited":true,"overrides":"Control#setTimeout","$longname":"YesNoMsgBox#setTimeout"},{"comment":"/**\n   * Sets the control title.\n   *\n   * @param {String} title\n   *   The title to set.\n   *\n   * @return {Control}\n   */","meta":{"range":[12875,12939],"filename":"Control.js","lineno":541,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001393","name":"Control#setTitle","type":"MethodDefinition","paramnames":["title"]},"vars":{"":null}},"description":"Sets the control title.","params":[{"type":{"names":["String"]},"description":"The title to set.","name":"title"}],"returns":[{"type":{"names":["Control"]}}],"name":"setTitle","longname":"YesNoMsgBox#setTitle","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#setTitle","inherited":true,"overrides":"Control#setTitle","$longname":"YesNoMsgBox#setTitle"},{"comment":"/**\n   * Sets whether control should return string values instead of integers.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control}\n   */","meta":{"range":[13946,14032],"filename":"Control.js","lineno":582,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100001442","name":"Control#stringOutput","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control should return string values instead of integers.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control"]}}],"name":"stringOutput","longname":"YesNoMsgBox#stringOutput","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"Control#stringOutput","inherited":true,"overrides":"Control#stringOutput","$longname":"YesNoMsgBox#stringOutput"},{"comment":"/**\n   * Sets whether control requires a value.\n   *\n   * @param {Boolean} [enabled=true]\n   *   Flag determining whether this option is enabled.\n   *\n   * @return {Control.<ThreeButtonControl>}\n   */","meta":{"range":[1908,1996],"filename":"ThreeButtonControl.js","lineno":93,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Core","code":{"id":"astnode100002212","name":"ThreeButtonControl#valueRequired","type":"MethodDefinition","paramnames":["enabled"]},"vars":{"":null}},"description":"Sets whether control requires a value.","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":true,"description":"Flag determining whether this option is enabled.","name":"enabled"}],"returns":[{"type":{"names":["Control.<ThreeButtonControl>"]}}],"name":"valueRequired","longname":"YesNoMsgBox#valueRequired","kind":"function","memberof":"YesNoMsgBox","scope":"instance","inherits":"ThreeButtonControl#valueRequired","inherited":true,"overrides":"ThreeButtonControl#valueRequired","$longname":"YesNoMsgBox#valueRequired"}],"$constructor":{"comment":"/**\n   * @inheritDoc\n   */","meta":{"range":[247,331],"filename":"YesNoMsgBox.js","lineno":17,"path":"/Users/markcarver/Documents/.sandbox/repositories/github/unicorn-fail/node-cocoadialog/Dialog","code":{"id":"astnode100005200","name":"YesNoMsgBox","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"inheritdoc":"","name":"YesNoMsgBox","longname":"YesNoMsgBox","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"YesNoMsgBox"}}],"symbols":["CheckBox","CheckBox#availableOptions","CheckBox#close","CheckBox#debug","CheckBox#float","CheckBox#getArguments","CheckBox#getResult","CheckBox#mapSeries","CheckBox#setButtons","CheckBox#setChecked","CheckBox#setColumns","CheckBox#setDisabled","CheckBox#setEmptyText","CheckBox#setHeight","CheckBox#setIcon","CheckBox#setIconFromBundle","CheckBox#setIconFromFile","CheckBox#setIconSize","CheckBox#setIconType","CheckBox#setItems","CheckBox#setLabel","CheckBox#setMixed","CheckBox#setOption","CheckBox#setPosition","CheckBox#setRows","CheckBox#setSize","CheckBox#setTimeout","CheckBox#setTitle","CheckBox#stringOutput","CheckBox#valueRequired","CheckBoxResult","CheckBoxResult#abort","CheckBoxResult#button","CheckBoxResult#checked","CheckBoxResult#hasAborted","CheckBoxResult#hasError","CheckBoxResult#hasTimedOut","CheckBoxResult#items","CheckBoxResult#mixed","CheckBoxResult#process","CheckBoxResult#setError","CheckBoxResult#timeout","CheckBoxResult#unchecked","CocoaDialogAbort","CocoaDialogError","CocoaDialogTimeout","Control","Control#availableOptions","Control#close","Control#debug","Control#float","Control#getArguments","Control#getResult","Control#mapSeries","Control#setHeight","Control#setIcon","Control#setIconFromBundle","Control#setIconFromFile","Control#setIconSize","Control#setIconType","Control#setOption","Control#setPosition","Control#setSize","Control#setTimeout","Control#setTitle","Control#stringOutput","ControlResult","ControlResult#abort","ControlResult#hasAborted","ControlResult#hasError","ControlResult#hasTimedOut","ControlResult#process","ControlResult#setError","ControlResult#timeout","DropDown","DropDown#availableOptions","DropDown#close","DropDown#debug","DropDown#exitOnChange","DropDown#float","DropDown#getArguments","DropDown#getResult","DropDown#mapSeries","DropDown#pullDown","DropDown#setButtons","DropDown#setEmptyText","DropDown#setHeight","DropDown#setIcon","DropDown#setIconFromBundle","DropDown#setIconFromFile","DropDown#setIconSize","DropDown#setIconType","DropDown#setItems","DropDown#setLabel","DropDown#setOption","DropDown#setPosition","DropDown#setSelected","DropDown#setSize","DropDown#setTimeout","DropDown#setTitle","DropDown#stringOutput","DropDown#valueRequired","FileControl","FileControl#availableOptions","FileControl#close","FileControl#createDirectories","FileControl#debug","FileControl#float","FileControl#getArguments","FileControl#getResult","FileControl#mapSeries","FileControl#packagesAsDirectories","FileControl#setDirectory","FileControl#setExtensions","FileControl#setFile","FileControl#setHeight","FileControl#setIcon","FileControl#setIconFromBundle","FileControl#setIconFromFile","FileControl#setIconSize","FileControl#setIconType","FileControl#setLabel","FileControl#setOption","FileControl#setPosition","FileControl#setSize","FileControl#setTimeout","FileControl#setTitle","FileControl#stringOutput","FileSave","FileSave#availableOptions","FileSave#close","FileSave#createDirectories","FileSave#debug","FileSave#float","FileSave#getArguments","FileSave#getResult","FileSave#mapSeries","FileSave#packagesAsDirectories","FileSave#setDirectory","FileSave#setExtensions","FileSave#setFile","FileSave#setHeight","FileSave#setIcon","FileSave#setIconFromBundle","FileSave#setIconFromFile","FileSave#setIconSize","FileSave#setIconType","FileSave#setLabel","FileSave#setOption","FileSave#setPosition","FileSave#setSize","FileSave#setTimeout","FileSave#setTitle","FileSave#stringOutput","FileSaveResult","FileSaveResult#abort","FileSaveResult#filename","FileSaveResult#hasAborted","FileSaveResult#hasError","FileSaveResult#hasTimedOut","FileSaveResult#process","FileSaveResult#setError","FileSaveResult#timeout","FileSelect","FileSelect#availableOptions","FileSelect#close","FileSelect#createDirectories","FileSelect#debug","FileSelect#float","FileSelect#getArguments","FileSelect#getResult","FileSelect#mapSeries","FileSelect#packagesAsDirectories","FileSelect#selectDirectories","FileSelect#selectMultiple","FileSelect#setAllowedFiles","FileSelect#setDirectory","FileSelect#setExtensions","FileSelect#setFile","FileSelect#setHeight","FileSelect#setIcon","FileSelect#setIconFromBundle","FileSelect#setIconFromFile","FileSelect#setIconSize","FileSelect#setIconType","FileSelect#setLabel","FileSelect#setOption","FileSelect#setPosition","FileSelect#setSize","FileSelect#setTimeout","FileSelect#setTitle","FileSelect#stringOutput","FileSelectResult","FileSelectResult#abort","FileSelectResult#hasAborted","FileSelectResult#hasError","FileSelectResult#hasTimedOut","FileSelectResult#process","FileSelectResult#setError","FileSelectResult#timeout","InputBox","InputBox#availableOptions","InputBox#blur","InputBox#close","InputBox#debug","InputBox#float","InputBox#getArguments","InputBox#getResult","InputBox#mapSeries","InputBox#password","InputBox#setButtons","InputBox#setEmptyText","InputBox#setHeight","InputBox#setIcon","InputBox#setIconFromBundle","InputBox#setIconFromFile","InputBox#setIconSize","InputBox#setIconType","InputBox#setLabel","InputBox#setOption","InputBox#setPosition","InputBox#setSize","InputBox#setTimeout","InputBox#setTitle","InputBox#setValue","InputBox#stringOutput","InputBox#valueRequired","InputResult","InputResult#abort","InputResult#button","InputResult#hasAborted","InputResult#hasError","InputResult#hasTimedOut","InputResult#numeric","InputResult#process","InputResult#setError","InputResult#timeout","InputResult#value","MsgBox","MsgBox#availableOptions","MsgBox#close","MsgBox#debug","MsgBox#float","MsgBox#getArguments","MsgBox#getResult","MsgBox#mapSeries","MsgBox#setAlert","MsgBox#setButtons","MsgBox#setEmptyText","MsgBox#setHeight","MsgBox#setIcon","MsgBox#setIconFromBundle","MsgBox#setIconFromFile","MsgBox#setIconSize","MsgBox#setIconType","MsgBox#setLabel","MsgBox#setOption","MsgBox#setPosition","MsgBox#setSize","MsgBox#setTimeout","MsgBox#setTitle","MsgBox#stringOutput","MsgBox#valueRequired","Notify","Notify#availableOptions","Notify#close","Notify#debug","Notify#float","Notify#getArguments","Notify#getResult","Notify#mapSeries","Notify#setHeight","Notify#setIcon","Notify#setIconFromBundle","Notify#setIconFromFile","Notify#setIconSize","Notify#setIconType","Notify#setOption","Notify#setPosition","Notify#setSize","Notify#setTimeout","Notify#setTitle","Notify#stringOutput","OkMsgBox","OkMsgBox#availableOptions","OkMsgBox#close","OkMsgBox#debug","OkMsgBox#float","OkMsgBox#getArguments","OkMsgBox#getResult","OkMsgBox#mapSeries","OkMsgBox#noCancel","OkMsgBox#setAlert","OkMsgBox#setButtons","OkMsgBox#setEmptyText","OkMsgBox#setHeight","OkMsgBox#setIcon","OkMsgBox#setIconFromBundle","OkMsgBox#setIconFromFile","OkMsgBox#setIconSize","OkMsgBox#setIconType","OkMsgBox#setLabel","OkMsgBox#setOption","OkMsgBox#setPosition","OkMsgBox#setSize","OkMsgBox#setTimeout","OkMsgBox#setTitle","OkMsgBox#stringOutput","OkMsgBox#valueRequired","ProgressBar","ProgressBar#availableOptions","ProgressBar#close","ProgressBar#debug","ProgressBar#float","ProgressBar#getArguments","ProgressBar#getResult","ProgressBar#indeterminate","ProgressBar#items","ProgressBar#mapSeries","ProgressBar#processItems","ProgressBar#setHeight","ProgressBar#setIcon","ProgressBar#setIconFromBundle","ProgressBar#setIconFromFile","ProgressBar#setIconSize","ProgressBar#setIconType","ProgressBar#setOption","ProgressBar#setPercent","ProgressBar#setPosition","ProgressBar#setSize","ProgressBar#setText","ProgressBar#setTimeout","ProgressBar#setTitle","ProgressBar#stoppable","ProgressBar#stringOutput","ProgressBar#update","ProgressBar#write","ProgressBarResult","ProgressBarResult#abort","ProgressBarResult#hasAborted","ProgressBarResult#hasError","ProgressBarResult#hasTimedOut","ProgressBarResult#process","ProgressBarResult#setError","ProgressBarResult#timeout","Radio","Radio#allowMixed","Radio#availableOptions","Radio#close","Radio#debug","Radio#float","Radio#getArguments","Radio#getResult","Radio#mapSeries","Radio#setButtons","Radio#setColumns","Radio#setDisabled","Radio#setEmptyText","Radio#setHeight","Radio#setIcon","Radio#setIconFromBundle","Radio#setIconFromFile","Radio#setIconSize","Radio#setIconType","Radio#setItems","Radio#setLabel","Radio#setMixed","Radio#setOption","Radio#setPosition","Radio#setRows","Radio#setSelected","Radio#setSize","Radio#setTimeout","Radio#setTitle","Radio#stringOutput","Radio#valueRequired","RadioResult","RadioResult#abort","RadioResult#button","RadioResult#hasAborted","RadioResult#hasError","RadioResult#hasTimedOut","RadioResult#process","RadioResult#selected","RadioResult#setError","RadioResult#timeout","SecureInputBox","SecureInputBox#availableOptions","SecureInputBox#blur","SecureInputBox#close","SecureInputBox#debug","SecureInputBox#float","SecureInputBox#getArguments","SecureInputBox#getResult","SecureInputBox#mapSeries","SecureInputBox#password","SecureInputBox#setButtons","SecureInputBox#setEmptyText","SecureInputBox#setHeight","SecureInputBox#setIcon","SecureInputBox#setIconFromBundle","SecureInputBox#setIconFromFile","SecureInputBox#setIconSize","SecureInputBox#setIconType","SecureInputBox#setLabel","SecureInputBox#setOption","SecureInputBox#setPosition","SecureInputBox#setSize","SecureInputBox#setTimeout","SecureInputBox#setTitle","SecureInputBox#setValue","SecureInputBox#stringOutput","SecureInputBox#valueRequired","SecureStandardInputBox","SecureStandardInputBox#availableOptions","SecureStandardInputBox#blur","SecureStandardInputBox#close","SecureStandardInputBox#debug","SecureStandardInputBox#float","SecureStandardInputBox#getArguments","SecureStandardInputBox#getResult","SecureStandardInputBox#mapSeries","SecureStandardInputBox#noCancel","SecureStandardInputBox#password","SecureStandardInputBox#setButtons","SecureStandardInputBox#setEmptyText","SecureStandardInputBox#setHeight","SecureStandardInputBox#setIcon","SecureStandardInputBox#setIconFromBundle","SecureStandardInputBox#setIconFromFile","SecureStandardInputBox#setIconSize","SecureStandardInputBox#setIconType","SecureStandardInputBox#setLabel","SecureStandardInputBox#setOption","SecureStandardInputBox#setPosition","SecureStandardInputBox#setSize","SecureStandardInputBox#setTimeout","SecureStandardInputBox#setTitle","SecureStandardInputBox#setValue","SecureStandardInputBox#stringOutput","SecureStandardInputBox#valueRequired","Slider","Slider#alwaysShowValue","Slider#availableOptions","Slider#close","Slider#debug","Slider#float","Slider#getArguments","Slider#getResult","Slider#mapSeries","Slider#returnFloat","Slider#setButtons","Slider#setEmptyText","Slider#setEmptyValue","Slider#setHeight","Slider#setIcon","Slider#setIconFromBundle","Slider#setIconFromFile","Slider#setIconSize","Slider#setIconType","Slider#setLabel","Slider#setMax","Slider#setMin","Slider#setOption","Slider#setPosition","Slider#setSize","Slider#setSliderLabel","Slider#setTicks","Slider#setTimeout","Slider#setTitle","Slider#setValue","Slider#sticky","Slider#stringOutput","Slider#valueRequired","StandardDropDown","StandardDropDown#availableOptions","StandardDropDown#close","StandardDropDown#debug","StandardDropDown#exitOnChange","StandardDropDown#float","StandardDropDown#getArguments","StandardDropDown#getResult","StandardDropDown#mapSeries","StandardDropDown#noCancel","StandardDropDown#pullDown","StandardDropDown#setButtons","StandardDropDown#setEmptyText","StandardDropDown#setHeight","StandardDropDown#setIcon","StandardDropDown#setIconFromBundle","StandardDropDown#setIconFromFile","StandardDropDown#setIconSize","StandardDropDown#setIconType","StandardDropDown#setItems","StandardDropDown#setLabel","StandardDropDown#setOption","StandardDropDown#setPosition","StandardDropDown#setSelected","StandardDropDown#setSize","StandardDropDown#setTimeout","StandardDropDown#setTitle","StandardDropDown#stringOutput","StandardDropDown#valueRequired","StandardInputBox","StandardInputBox#availableOptions","StandardInputBox#blur","StandardInputBox#close","StandardInputBox#debug","StandardInputBox#float","StandardInputBox#getArguments","StandardInputBox#getResult","StandardInputBox#mapSeries","StandardInputBox#noCancel","StandardInputBox#password","StandardInputBox#setButtons","StandardInputBox#setEmptyText","StandardInputBox#setHeight","StandardInputBox#setIcon","StandardInputBox#setIconFromBundle","StandardInputBox#setIconFromFile","StandardInputBox#setIconSize","StandardInputBox#setIconType","StandardInputBox#setLabel","StandardInputBox#setOption","StandardInputBox#setPosition","StandardInputBox#setSize","StandardInputBox#setTimeout","StandardInputBox#setTitle","StandardInputBox#setValue","StandardInputBox#stringOutput","StandardInputBox#valueRequired","TextBox","TextBox#availableOptions","TextBox#close","TextBox#debug","TextBox#editable","TextBox#float","TextBox#focus","TextBox#getArguments","TextBox#getResult","TextBox#mapSeries","TextBox#scrollToBottom","TextBox#selectAll","TextBox#setButtons","TextBox#setEmptyText","TextBox#setFile","TextBox#setHeight","TextBox#setIcon","TextBox#setIconFromBundle","TextBox#setIconFromFile","TextBox#setIconSize","TextBox#setIconType","TextBox#setLabel","TextBox#setOption","TextBox#setPosition","TextBox#setSize","TextBox#setText","TextBox#setTimeout","TextBox#setTitle","TextBox#stringOutput","TextBox#valueRequired","ThreeButtonControl","ThreeButtonControl#availableOptions","ThreeButtonControl#close","ThreeButtonControl#debug","ThreeButtonControl#float","ThreeButtonControl#getArguments","ThreeButtonControl#getResult","ThreeButtonControl#mapSeries","ThreeButtonControl#setButtons","ThreeButtonControl#setEmptyText","ThreeButtonControl#setHeight","ThreeButtonControl#setIcon","ThreeButtonControl#setIconFromBundle","ThreeButtonControl#setIconFromFile","ThreeButtonControl#setIconSize","ThreeButtonControl#setIconType","ThreeButtonControl#setLabel","ThreeButtonControl#setOption","ThreeButtonControl#setPosition","ThreeButtonControl#setSize","ThreeButtonControl#setTimeout","ThreeButtonControl#setTitle","ThreeButtonControl#stringOutput","ThreeButtonControl#valueRequired","ThreeButtonControlResult","ThreeButtonControlResult#abort","ThreeButtonControlResult#button","ThreeButtonControlResult#hasAborted","ThreeButtonControlResult#hasError","ThreeButtonControlResult#hasTimedOut","ThreeButtonControlResult#process","ThreeButtonControlResult#setError","ThreeButtonControlResult#timeout","YesNoMsgBox","YesNoMsgBox#availableOptions","YesNoMsgBox#close","YesNoMsgBox#debug","YesNoMsgBox#float","YesNoMsgBox#getArguments","YesNoMsgBox#getResult","YesNoMsgBox#mapSeries","YesNoMsgBox#noCancel","YesNoMsgBox#setAlert","YesNoMsgBox#setButtons","YesNoMsgBox#setEmptyText","YesNoMsgBox#setHeight","YesNoMsgBox#setIcon","YesNoMsgBox#setIconFromBundle","YesNoMsgBox#setIconFromFile","YesNoMsgBox#setIconSize","YesNoMsgBox#setIconType","YesNoMsgBox#setLabel","YesNoMsgBox#setOption","YesNoMsgBox#setPosition","YesNoMsgBox#setSize","YesNoMsgBox#setTimeout","YesNoMsgBox#setTitle","YesNoMsgBox#stringOutput","YesNoMsgBox#valueRequired"]}},"app":{"base":"/node-cocoadialog/","title":"cocoadialog (node.js)","routing":{"method":"query","caseSensitive":true},"entrance":"content:guide","meta":null,"server":"static"},"template":{"name":"Docma Default Template","version":"1.7.0","author":"Onur Yıldırım (onur@cutepilot.com)","license":"MIT","main":"index.html","options":{"title":"cocoadialog (node.js)","sidebar":true,"collapsed":false,"outline":"tree","badges":true,"search":true,"symbolMeta":true,"navbar":true,"navItems":[{"label":"Getting Started","href":"/","iconClass":"ico-target4"},{"label":"API","href":"/?api","iconClass":"ico-book"},{"label":"Examples","href":"/?content=examples","iconClass":"ico-mouse-pointer"},{"label":"Releases","iconClass":"ico-md ico-download","target":"_blank","href":"https://github.com/unicorn-fail/node-cocoadialog/releases"},{"label":"GitHub","href":"https://github.com/unicorn-fail/node-cocoadialog","target":"_blank","iconClass":"ico-md ico-github"}]}},"_":{"partials":{"api":"docma-api","content":"docma-content","notFound":"docma-404"},"elementID":"docma-main","contentElementID":"docma-content","logsEnabled":false}};
!function(){var e={};e.createChild=function(e,t,n){n=n||{};var o=document.createElement(t||"div");return Object.keys(n).forEach(function(e){o[e]=n[e]}),e.appendChild(o),o},e.getDocmaElem=function(){var t=document.getElementById(docma._.elementID);return t||(t=e.createChild(document.body,"div",{id:docma._.elementID})),t},e.getContentElem=function(){var e=document.getElementById(docma._.contentElementID);if(!e)throw new Error("Partial "+docma._.partials.content+' should have an element with id="'+docma._.contentElementID+'".');return e},e.loadCompiledContent=function(t){e.getDocmaElem().innerHTML=t},e.loadContent=function(t){e.getContentElem().innerHTML=t,e.scrollTo()},e.getOffset=function(e){var t="object"==typeof e?e:document.getElementById(e);if(t){var n=t.getBoundingClientRect();if(n.width||n.height||t.getClientRects().length){var o=document.documentElement;return{top:n.top+window.pageYOffset-o.clientTop,left:n.left+window.pageXOffset-o.clientLeft}}}},e.scrollTo=function(t){if(!(t=(t||window.location.hash||"").replace(/^#/,"")))return void(document.body.scrollTop=0);var n=document.getElementById(t);n&&(document.body.scrollTop=e.getOffset(n).top)},e.fixAnchors=function(){docma.app.base&&setTimeout(function(){var e,t,n=document.querySelectorAll('a[href^="#"]');for(e=0;e<n.length;e++){t=n[e];var o=t.getAttribute("href");"#"===o.slice(0,1)&&o.length>1&&(o=window.location.pathname+(window.location.search||"")+o,t.setAttribute("href",o))}},50)},docma.dom=Object.freeze(e)}();
!function(){dust.filters=dust.filters||{},dust.filters.$pt=function(t){return docma.utils.parseTicks(t)},dust.filters.$pnl=function(t){return docma.utils.parseNewLines(t,{keepIfSingle:!0})},dust.filters.$pl=function(t){return docma.utils.parseLinks(t)},dust.filters.$tl=function(t){return docma.utils.trimLeft(t)},dust.filters.$p=function(t){return docma.utils.parse(t,{keepIfSingle:!0})},dust.filters.$nt=function(t){return docma.utils.normalizeTabs(t)},dust.filters.$desc=function(t){return docma.utils.parse(t.classdesc||t.description||"")},dust.filters.$def=function(t){return t.optional?String(t.defaultvalue):""};var t=/true|false|null|undefined|Infinity|NaN|\d+|Number\.\w+|Math\.(PI|E|LN(2|10)|LOG(2|10)E|SQRT(1_)?2)|\[.*?]|\{.*?}|new [a-zA-Z]+.*|\/.+\/[gmiu]*|Date\.(now\(\)|UTC\(.*)|window|document/;dust.filters.$val=function(e){var n=docma.utils.notate(e,"meta.code.value");if(void 0===n)return"";if("string"!=typeof n)return n;var i=docma.utils.notate(e,"type.names")||[];return!/['"`]/.test(n.slice(0,1))&&i.indexOf("String")>=0&&(1===i.length||-1===t.indexOf(n))?'"'+n+'"':n},dust.filters.$id=function(t){var e;if("string"==typeof t)e=t;else{e=(docma.utils.isConstructor(t)?"new-":"")+t.$longname}return e.replace(/ /g,"-")}}();
!function(){function o(o,e,n){return e?(o&&"/"!==e.slice(0,1)&&(e="/"+e),n&&"/"!==e.slice(-1)&&(e+="/"),e):o||n?"/":""}function e(o,e){e=void 0===e?window.location.search||"":e,"?"===e.slice(0,1)&&(e=e.slice(1)),o=o.replace(/[\[\]]/g,"\\$&");var n=new RegExp("&?"+o+"(=([^&#]*)|&|#|$)"),a=n.exec(e);return a&&a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):""}Object.defineProperty(docma,"location",{configurable:!1,get:function(){var n=o(!0,window.location.pathname,!0),a=o(!0,docma.app.base,!0),c=n;return n.slice(0,a.length)===a&&(c=n.slice(a.length-1,n.length)),{host:window.location.host,hostname:window.location.hostname,origin:window.location.origin,port:window.location.port,protocol:(window.location.protocol||"").replace(/:$/,""),entrance:o(!0,docma.app.entrance,!1),base:a,hash:(window.location.hash||"").replace(/^#/,""),query:(window.location.search||"").replace(/^\?/,""),href:window.location.href,fullpath:n,pathname:c,path:c+(window.location.search||""),getQuery:e}}}),docma.location=Object.freeze(docma.location)}();
!function(){function e(e){return e&&""!==e.trim()?e:null}function n(e){return(e||"").replace(/([^>]+>)?~?(.*)/,"$2")}function t(e){return e}var r={};r.notate=function(e,n){if("object"==typeof e){var t,i=Array.isArray(n)?n:n.split("."),a=i[0];if(a)return t=e[a],i.length>1?(i.shift(),r.notate(t,i)):t}},r.getName=function(e){if(e.alias){var t=n(r.notate(e,"meta.code.name")||"");if(t)return t.replace(/.*?[#.~:](\w+)$/i,"$1")}return e.name},r.getLongName=function(e){var t=n(e.longname);if(e.alias){var i=n(r.notate(e,"meta.code.name")||"");if(!i)return t;var a=n(e.memberof||"");if(!a)return i;var o=new RegExp("^"+a+"[#\\.~:]"),s="instance"===e.scope?"#":".";return o.test(i)?i:a+s+i}return t},r.getFullName=r.getLongName,r.getCodeName=function(e){return n(r.notate(e,"meta.code.name")||"")||r.getLongName(e)},r.getSymbolByName=function(e,n){var t,i;for(t=0;t<e.length;t++){if(i=e[t],i.name===n||i.longname===n||r.getFullName(i)===n)return i;if(i.$members){var a=r.getSymbolByName(i.$members,n);if(a)return a}}return null},r.isDeprecated=function(e){return e.deprecated},r.isGlobal=function(e){return"global"===e.scope},r.isNamespace=function(e){return"namespace"===e.kind},r.isModule=function(e){return"module"===e.kind},r.isClass=function(e){return!r.isConstructor(e)&&("class"===e.kind||"ClassDeclaration"===r.notate(e,"meta.code.type"))},r.isConstructor=function(e){return"class"===e.kind&&"MethodDefinition"===r.notate(e,"meta.code.type")},r.isStaticMember=function(e){return"static"===e.scope},r.isStatic=r.isStaticMember,r.isInner=function(e){return"inner"===e.scope},r.isInstanceMember=function(e){return"instance"===e.scope},r.isMethod=function(e){var n=r.notate(e,"meta.code.type");return"function"===e.kind||"MethodDefinition"===n||"FunctionExpression"===n},r.isFunction=r.isMethod,r.isInstanceMethod=function(e){return r.isInstanceMember(e)&&r.isMethod(e)},r.isStaticMethod=function(e){return r.isStaticMember(e)&&r.isMethod(e)},r.isProperty=function(e){return"member"===e.kind},r.isInstanceProperty=function(e){return r.isInstanceMember(e)&&r.isProperty(e)},r.isStaticProperty=function(e){return r.isStaticMember(e)&&r.isProperty(e)},r.isTypeDef=function(e){return"typedef"===e.kind},r.isCustomType=r.isTypeDef,r.isEnum=function(e){return e.isEnum},r.isReadOnly=function(e){return e.readonly},r.isPublic=function(e){return"string"!=typeof e.access||"public"===e.access},r.isPrivate=function(e){return"private"===e.access},r.isProtected=function(e){return"protected"===e.access},r.isUndocumented=function(e){return!e.comments},r.hasDescription=function(n){return Boolean(e(n.classdesc)||e(n.description))},r.getTypes=function(e){if("class"===e.kind)return"class";var n=r.notate(e,"type.names")||[];return n=n.map(function(e){return e.replace(/\.</g,"<")}).join("|"),e.isEnum?"enum<"+n+">":n},r.getReturnTypes=function(e){var n=e.returns;if(!Array.isArray(n))return"void";var t,i=n.reduce(function(e,n){return t=r.notate(n,"type.names"),Array.isArray(t)?e.concat(t):e},[]);return i.length>0?i.join("|"):"void"},r.trimLeft=function(e){return e.replace(/^[\s\n\r\-—]*/,"")},r.parseTicks=function(e){return e.replace(/(```\s*)([\s\S]*?)(\s*```)/g,function(e,n,t){return r.normalizeTabs(r._wrapEscapeCode(t,!0).replace(/`/g,"&#x60;"))}).replace(/(`)(.*?)(`)/g,function(e,n,t){return r._wrapEscapeCode(t)})},r.parseNewLines=function(e,n){return n=n||{},r._tokenize(e,function(e,t){if(t)return e;var r=e.split(/\n{2,}/);return r.length<=1&&n.keepIfSingle?e:r.map(function(e){return"<p>"+e+"</p>"}).join("")}).join("")},r.parseLinks=function(e,n){n=n||{};var t=e.replace(/\{@link +([^}]*?)\}/g,function(e,t){var r,i,a=t.split("|");return 1===a.length?r=i=a[0].trim():(r=a[0].trim(),i=a[1].trim()),'<a href="'+r+'"'+(n.target?' target="'+n.target+'"':"")+">"+i+"</a>"});return r.parseTicks(t)},r.parse=function(e,n){return n=n||{},e=r.trimLeft(e),e=r.parseNewLines(e,n),e=r.parseTicks(e),r.parseLinks(e,n)},r.normalizeTabs=function(e){var n=e.match(/^\s*/gm),t=1/0;if(n.forEach(function(e,n){e=e.replace(/\t/g,"  "),n>0&&(t=Math.min(e.length,t))}),t!==1/0){var r=new RegExp("^\\s{"+t+"}","g");e=e.replace(r,"")}e=e.replace(/^\s*/,"");var i;return e.replace(/(\n+)(\s+)/gm,function(e,n,t){return i=t.replace(/\t/g,"  "),i=new Array(i.length-i.length%2+1).join(" "),n+i})},r.getKeywords=function(e){if("string"==typeof e)return e.toLowerCase();var n=r.getFullName(e)+" "+e.longname+" "+e.name+" "+(e.alias||"")+" "+(e.memberOf||"")+" "+(e.kind||"")+" "+(e.scope||"")+" "+(e.classdesc||"")+" "+(e.description||"")+" "+(e.filename||"")+" "+(e.readonly?"readonly":"")+(e.isEnum?"enum":"");return r.isConstructor(e)&&(n+=" constructor"),r.isMethod(e)&&(n+=" method"),r.isProperty(e)&&(n+=" property"),n.replace(/[><"'`\n\r]/g,"").toLowerCase()},r.getCodeFileInfo=function(e){return{filename:r.notate(e,"meta.filename"),lineno:r.notate(e,"meta.lineno"),path:r.notate(e,"meta.path")}},r.listType=function(e){return e.map(function(e){return r._wrapEscapeCode(e)}).join(", ")},r.listTypeDesc=function(e){if(!e||0===e.length)return"";var n,t=e.map(function(e){return n=r.parse(e.description||"",{keepIfSingle:!0}),n&&(n="&nbsp;&nbsp;—&nbsp;&nbsp;"+n),r._wrapEscapeCode(e.type.names.join("|"))+n});return t.length>1?"<ul>\n"+t.join("</li>\n<li>")+"\n</ul>":t},r._find=function(e,n){if(!e||!n)return null;var t,r,i=null;for(t=0;t<e.length;t++)if((r=e[t])&&"object"==typeof r){for(var a in n)if(void 0!==n[a]&&n.hasOwnProperty(a)){if(n[a]!==r[a]){i=null;break}i=r}if(i)break}return i},r._assign=function(e,n,t){e=e||{};var r;for(r in n)n.hasOwnProperty(r)&&(t?Object.defineProperty(e,r,{enumerable:!0,value:n[r]}):e[r]=n[r]);return e},r._values=function(e){if(Array.isArray(e))return e;var n,t=[];for(n in e)e.hasOwnProperty(n)&&t.push(e[n]);return t},r._wrapEscapeCode=function(e,n){return e=e.replace(/</g,"&lt;").replace(/>/g,"&gt;"),e="<code>"+e+"</code>",n?"<pre>"+e+"</pre>":e},r._tokenize=function(e,n){"function"!=typeof n&&(n=t);if(e.indexOf("```")<0)return[n(e,!1)];var r,i="```".length,a="",o="",s=[],u=!1;for(r=0;r<e.length;r++)a+=e[r],o+=e[r],a.length>i&&(a=a.slice(-i)),"```"===a&&(u=!u,u?(s.push(n(o.slice(0,-i),!1)),o=a):(s.push(n(o,!0)),o=""));return s},docma.utils=r}();
!function(){function t(t,e){l.info("Event:",t,e?e[0]:""),y.trigger(t,e)}function e(t,n){if(n&&!(u.indexOf(n)<0)){if(t)docma.app.routing.caseSensitive||(t=t.toLowerCase());else{if(n!==e.Type.API)return;t=f}var o=p._find(docma.routes,{type:n,name:t});o&&p._assign(this,o)}}function n(t,e){dust.render(t,docma,function(t,n){if(t)throw t;m.loadCompiledContent(n),"function"==typeof e&&e()})}function o(){t(docma.Event.Render,[docma.currentRoute]),d&&(t(docma.Event.Ready),d=!1)}function r(o,r){docma._.currentRoute=e.create(null),n(docma._.partials.notFound,function(){if(t(docma.Event.Render,[null]),m.scrollTo(),"function"==typeof r)return r(404);throw new Error("Page or content not found for route: "+JSON.stringify(o))})}function a(){if(s){var t=sessionStorage.getItem("redirectPath")||null;if(t)return sessionStorage.removeItem("redirectPath"),l.info("Redirecting to:",t),page.redirect(t),!0}return!1}function i(t){var e=t||window.location.search;return/^[?&]/.test(e)&&(e=e.slice(1)),e||null}var c,u,d=!1,s="path"===docma.app.routing.method,f="_def_",p=docma.utils,m=docma.dom,l={};["log","info","warn","error"].forEach(function(t){!function(){l[t]=function(){docma._.logsEnabled&&console[t].apply(console,arguments)}}()}),docma.addFilter=function(t,e){if(docma.filterExists(t))throw new Error('Filter "'+t+'" already exists.');return dust.filters[t]=e,docma},docma.removeFilter=function(t){return delete dust.filters[t],docma},docma.filterExists=function(t){return"function"==typeof dust.filters[t]};var y=new EventEmitter;docma.Event={Ready:"ready",Render:"render",Route:"route"},docma.on=function(t,e){return y.on.apply(y,arguments),docma},docma.once=function(){return y.once.apply(y,arguments),docma},docma.off=function(){return y.off.apply(y,arguments),docma},docma.addListener=docma.on,docma.addListenerOnce=docma.once,docma.removeListener=docma.off,Object.defineProperty(docma,"currentRoute",{configurable:!1,get:function(){return docma._.currentRoute}}),Object.defineProperty(docma,"documentation",{configurable:!1,get:function(){return docma._.documentation}}),Object.defineProperty(docma,"symbols",{configurable:!1,get:function(){return docma._.symbols}}),e.Type={API:"api",CONTENT:"content"},u=p._values(e.Type),e.prototype.exists=function(){return Boolean(this.id)},e.prototype.isEqualTo=function(t){return!!(t&&t.exists()&&this.exists())&&t.path===this.path},e.prototype.isCurrent=function(){return this.isEqualTo(docma.currentRoute)},e.prototype.apply=function(){return this.type===e.Type.API?(docma._.documentation=docma.apis[this.name].documentation,docma._.symbols=docma.apis[this.name].symbols):(docma._.documentation=null,docma._.symbols=null),t(docma.Event.Route,[this]),docma.render(this),this},e.prototype.toString=function(){return JSON.stringify(this)},e.create=function(t,n){return new e(t,n)},e.fromID=function(t){if("string"!=typeof t)return l.warn("Route ID is not a string: "+t),new e(null);var n=t.split(":");return new e(n[1],n[0])},e.fromQuery=function(t){if(!t)return new e(null);var n=t.split("&")[0].split("="),o=n[0].toLowerCase();return new e(n[1],o)},Object.defineProperty(docma,"Route",{configurable:!1,get:function(){return e}}),docma.fetch=function(t,e){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4===n.readyState){var o=200===n.status?n.responseText:"";return l.log("XHR GET:",n.status,t),e(n.status,o)}},n.open("GET",t,!0),n.send()},docma.render=function(t,a){if(!t||!t.exists())return r(t,a);if(!t.isEqualTo(docma.currentRoute)){docma._.currentRoute=t;var i="function"==typeof a;t.type===e.Type.API?n(docma._.partials.api,function(){o(),i&&a(200),m.fixAnchors(),m.scrollTo()}):docma.fetch(t.contentPath,function(e,c){if(404===e)return r(t,a);n(docma._.partials.content,function(){m.loadContent(c),o(),i&&a(e),m.fixAnchors()})})}},docma.app.base&&page.base(docma.app.base),page.redirect("(/)?"+docma.template.main,""),s&&(page("(/)?api/:apiName?",function(t,n){var o=t.params.apiName||f,r=e.create(o,e.Type.API);if(!r||!r.exists())return n();r.apply()}),page("(/)?:content",function(t,n){var o=t.params.content,r=e.create(o,e.Type.CONTENT);if(!r||!r.exists())return n();r.apply()})),page("(/)?",function(t,n){a()||setTimeout(function(){var o,r=i(t.querystring);if(s){if(r)return n();o=c}else l.log("Query-string:",r),o=r?e.fromQuery(r):c;if(!o||!o.exists())return n();o.isCurrent()||o.apply()},100)}),page("*",function(t){l.warn("Unknown Route:",t.path),e.create(null).apply()}),l.info("Docma SPA Configuration:"),l.info("App Title:          ",docma.app.title),l.info("Routing Method:     ",docma.app.routing.method),l.info("App Server:         ",docma.app.server),l.info("Base Path:          ",docma.app.base),l.info("Entrance Route ID:  ",docma.app.entrance),window.onload=function(){d=!0,c=e.fromID(docma.app.entrance),page.start({click:!0,popstate:!0,dispatch:!0,hashbang:!1,decodeURLComponents:!0}),l.info("Docma SPA loaded!")}}();
docma = Object.freeze(docma);